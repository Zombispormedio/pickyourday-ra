var app=angular.module("ar-toolkit",["ionic"]);angular.module("ar-toolkit").run(["$ionicPlatform",function(e){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}]),angular.module("ar-toolkit").controller("ARController",["$scope",function(e){var t=new THREE.BoxGeometry(1,1,1),n=new THREE.MeshPhongMaterial({color:8375321,shininess:230,wireframe:!0}),o=new THREE.Mesh(t,n);o.position.x=-1,o.position.z=-5,e.actions={onCreate:function(e,t){console.log("create"),e.add(o)},onUpdate:function(e,t){console.log("update"),o.rotation.x+=.1,o.rotation.y+=.1},onDestroy:function(e,t){console.log("remove"),e.remove(o)}}}]),angular.module("ar-toolkit").directive("arView",["ARUtils","ARCamera","AR","$ionicPlatform",function(e,t,n,o){return{restrict:"A",scope:{actions:"=actions"},link:function(r,a,i){var c=a[0];console.log(r.actions),o.ready(function(){e.size(c),e.setVideoSize(),t.wait(function(){n.init(c,r.actions),n.tick()})})}}}]),angular.module("ar-toolkit").factory("AR3D",function(){var e=function(e){function t(){a.needsUpdate=!0}var n=new THREE.Camera,o=new THREE.Scene,r=new THREE.PlaneGeometry(2,2,0),a=new THREE.Texture(e);a.generateMipmaps=!1,a.minFilter=THREE.NearestFilter,a.magFilter=THREE.NearestFilter,a.wrapS=a.wrapT=THREE.ClampToEdgeWrapping;var i=new THREE.MeshBasicMaterial({map:a,depthTest:!1,depthWrite:!1}),c=new THREE.Mesh(r,i);return o.add(c),{camera:n,scene:o,update:t}},t=function(){function e(e){n.add(e)}function t(e){n.remove(e)}var n=new THREE.Scene,o=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3);return o.position.z=5,{scene:n,camera:o,add:e,remove:t}},n=function(n,o,r){function a(){d.render(l.scene,l.camera),d.render(s.scene,s.camera)}function i(){l.update()}function c(e){s.add(e)}function u(e){s.remove(e)}var d=new THREE.WebGLRenderer({canvas:n,antialias:!0});d.setSize(o.width,o.height),d.setPixelRatio(window.devicePixelRatio),d.autoClear=!1;var l=new e(r),s=new t,m=new THREE.SpotLight(16777215);return m.position.set(0,0,9e3),m.lookAt(new THREE.Vector3(0,0,0)),s.scene.add(m),{add:c,remove:u,update:i,render:a,glCanvas:n,virtual:s.scene}};return{create:n}}),angular.module("ar-toolkit").factory("ARCamera",["ARUtils","$ionicPlatform",function(e,t){var n=document.getElementById("video"),o=function(e,t,n){var o=void 0;return navigator.getUserMedia?o=navigator.getUserMedia(e,t,n):navigator.webkitGetUserMedia&&(o=navigator.webkitGetUserMedia(e,t,n)),o},r=function(e){return function(t){var o=window.URL||window.webkitURL;n.src=o.createObjectURL(t),n.play(),e()}},a=function(e){console.log("An error occured! "+e)},i=function(e){o({video:!0,audio:!1},r(e),a)},c=function(){return{width:n.width,height:n.height}},u=function(e){e.drawImage(n,0,0)};return{wait:i,copyToContext:u,getDimensions:c}}]),angular.module("ar-toolkit").factory("ARDetector",function(){function e(e){var t=new NyARRgbRaster_Canvas2D(e),n=new FLARParam(e.width,e.height),o=new FLARMultiIdMarkerDetector(n,120);o.setContinueMode(!0);var r=function(e){var t=o.getIdMarkerData(e);if(t.packetLength>4)return-1;for(var n=0,r=0;r<t.packetLength;r++)n=n<<8|t.getPacketData(r);return n},a=function(e){var t=new NyARTransMatResult;o.getTransformMatrix(e,t);var n=new Float32Array(16);return n[0]=t.m00,n[1]=-t.m10,n[2]=t.m20,n[3]=0,n[4]=t.m01,n[5]=-t.m11,n[6]=t.m21,n[7]=0,n[8]=-t.m02,n[9]=t.m12,n[10]=-t.m22,n[11]=0,n[12]=t.m03,n[13]=-t.m13,n[14]=t.m23,n[15]=1,n},i=function(e,t){var o=new Float32Array(16);return n.copyCameraMatrix(o,e,t),o},c=1,u=function(e,t){return{id:e,matrix:t,age:c}},d={},l=function(e,n,i){for(var l=o.detectMarkerLite(t,70),s=0;l>s;s++){var m=r(s),f=d[m];void 0===f?(f=u(m,a(s)),d[m]=f,e(f)):(f.matrix=a(s),f.age=c,n(f))}for(var m in d){var f=d[m];f&&0==f.age--&&(i(f),delete d[m])}};return{detect:l,getCameraMatrix:i}}return{create:e}}),angular.module("ar-toolkit").factory("AR",["ARCamera","ARDetector","AR3D","ARMarker",function(e,t,n,o){var r,a,i,c,u,d=function(d,l){l=l||{},u={},r=document.createElement("canvas");var s=e.getDimensions();r.width=s.width,r.height=s.height,a=r.getContext("2d"),i=t.create(r),c=n.create(d,s,r),u.onCreate=o.Primitive(c,l.onCreate||o.onCreate),u.onUpdate=o.Primitive(c,l.onUpdate||o.onUpdate),u.onDestroy=o.Primitive(c,l.onDestroy||o.onDestroy)},l=function(){e.copyToContext(a),r.changed=!0,i.detect(u.onCreate,u.onUpdate,u.onDestroy),c.update(),c.render(),window.requestAnimationFrame(l)};return{init:d,tick:l}}]),angular.module("ar-toolkit").factory("ARMarker",["ARObject",function(e){var t={16:e.create({color:13369344}),32:e.create({color:52224}),64:e.create({color:204})},n=function(e,n){console.log("Created"),console.log(n.id);var o=t[n.id];o.rotation.x+=.1,o.rotation.y+=.1,e.add(o)},o=function(e,n){console.log("update"),console.log(n.id);var o=t[n.id];o.rotation.x+=.1,o.rotation.y+=.1},r=function(e,n){console.log("remove"),console.log(n.id);var o=t[n.id];e.remove(o)},a=function(e,t){return console.log(t),function(n){t(e,n)}};return{Primitive:a,onCreate:n,onUpdate:o,onDestroy:r}}]),angular.module("ar-toolkit").factory("ARObject",function(){function e(e){var t=new THREE.BoxGeometry(1,1,1),n=new THREE.MeshBasicMaterial({color:e}),o=new THREE.Mesh(t,n);return o.position.z=-5,o}function t(t){return e(t.color)}return{create:t}}),angular.module("ar-toolkit").factory("ARUtils",["$ionicPlatform",function(e){var t=function(e){e.width=window.innerWidth,e.height=window.innerHeight};return{size:t,setVideoSize:function(){t(document.getElementById("video"))}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
