var app=angular.module("ar-toolkit",["ionic"]);angular.module("ar-toolkit").run(["$ionicPlatform",function(e){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}]),angular.module("ar-toolkit").directive("arView",["ARUtils","ARCamera","AR",function(e,t,r){return{restrict:"A",link:function(n,a,o){var i=a[0];e.size(i),t.wait(function(){r.init(i),r.tick()})}}}]),angular.module("ar-toolkit").factory("AR3D",["ARObject",function(e){var t=function(e){function t(){o.needsUpdate=!0}var r=new THREE.Camera,n=new THREE.Scene,a=new THREE.PlaneGeometry(2,2,0),o=new THREE.Texture(e);o.generateMipmaps=!1,o.minFilter=THREE.NearestFilter,o.magFilter=THREE.NearestFilter,o.wrapS=o.wrapT=THREE.ClampToEdgeWrapping;var i=new THREE.MeshBasicMaterial({map:o,depthTest:!1,depthWrite:!1}),c=new THREE.Mesh(a,i);return n.add(c),{camera:r,scene:n,update:t}},r=function(){function e(e){n.add(e),console.log(n)}function t(e){n.remove(e)}function r(e){a.projectionMatrix.setFromArray(e)}var n=new THREE.Scene,a=new THREE.Camera;return{scene:n,camera:a,add:e,remove:t,setProjectionMatrix:r}},n=function(n,a,o){function i(){m.render(s.scene,s.camera),m.render(f.scene,f.camera)}function c(){s.update()}function u(e){f.add(e.model)}function d(e){f.setProjectionMatrix(e)}function l(e){f.remove(e.model)}var m=new THREE.WebGLRenderer({canvas:n});m.setSize(a.width,a.height),m.autoClear=!1;var s=new t(o),f=new r,g=new THREE.SpotLight(16777215);g.position.set(0,0,9e3),g.lookAt(new THREE.Vector3(0,0,0)),f.scene.add(g);var w=e.create({color:13369344});return f.add(w.model),{add:u,remove:l,update:c,render:i,glCanvas:n,setCameraMatrix:d}};return{create:n}}]),angular.module("ar-toolkit").factory("ARCamera",["ARUtils",function(e){var t=document.getElementById("video");e.size(t);var r=function(e,t,r){var n=void 0;return navigator.getUserMedia?n=navigator.getUserMedia(e,t,r):navigator.webkitGetUserMedia&&(n=navigator.webkitGetUserMedia(e,t,r)),n},n=function(e){return function(r){var n=window.URL||window.webkitURL;t.src=n.createObjectURL(r),t.play(),e()}},a=function(e){console.log("An error occured! "+e)},o=function(e){r({video:!0,audio:!1},n(e),a)},i=function(){return{width:t.width,height:t.height}},c=function(e){e.drawImage(t,0,0)};return{wait:o,copyToContext:c,getDimensions:i}}]),angular.module("ar-toolkit").factory("ARDetector",function(){function e(e){var t=new NyARRgbRaster_Canvas2D(e),r=new FLARParam(e.width,e.height),n=new FLARMultiIdMarkerDetector(r,120);n.setContinueMode(!0);var a=function(e){var t=n.getIdMarkerData(e);if(t.packetLength>4)return-1;for(var r=0,a=0;a<t.packetLength;a++)r=r<<8|t.getPacketData(a);return r},o=function(e){var t=new NyARTransMatResult;n.getTransformMatrix(e,t);var r=new Float32Array(16);return r[0]=t.m00,r[1]=-t.m10,r[2]=t.m20,r[3]=0,r[4]=t.m01,r[5]=-t.m11,r[6]=t.m21,r[7]=0,r[8]=-t.m02,r[9]=t.m12,r[10]=-t.m22,r[11]=0,r[12]=t.m03,r[13]=-t.m13,r[14]=t.m23,r[15]=1,r},i=function(e,t){var n=new Float32Array(16);return r.copyCameraMatrix(n,e,t),n},c=1,u=function(e,t){return{id:e,matrix:t,age:c}},d={},l=function(e,r,i){for(var l=n.detectMarkerLite(t,70),m=0;l>m;m++){var s=a(m),f=d[s];void 0===f?(f=u(s,o(m)),d[s]=f,e(f)):(f.matrix=o(m),f.age=c,r(f))}for(var s in d){var f=d[s];f&&0==f.age--&&(i(f),delete d[s])}};return{detect:l,getCameraMatrix:i}}return{create:e}}),angular.module("ar-toolkit").factory("AR",["ARCamera","ARDetector","AR3D","ARMarker",function(e,t,r,n){var a,o,i,c,u=function(n){a=document.createElement("canvas");var u=e.getDimensions();console.log(u),a.width=u.width,a.height=u.height,o=a.getContext("2d"),i=t.create(a),c=r.create(n,u,a),c.setCameraMatrix(i.getCameraMatrix(10,1e3))},d=function(){e.copyToContext(o),a.changed=!0,i.detect(n.onCreate(c),n.onUpdate(c),n.onDestroy(c)),c.update(),c.render(),window.requestAnimationFrame(d)};return{init:u,tick:d}}]),angular.module("ar-toolkit").factory("ARMarker",["ARObject",function(e){var t={16:e.create({color:13369344}),32:e.create({color:52224}),64:e.create({color:204})},r=function(e){return function(r){console.log("Created"),console.log(r.id);var n=t[r.id];n.transform(r.matrix),e.add(n)}},n=function(e){return function(e){console.log("update"),console.log(e.id);var r=t[e.id];r.transform(e.matrix)}},a=function(e){return function(r){console.log("remove"),console.log(r.id);var n=t[r.id];e.remove(n)}};return{onCreate:r,onUpdate:n,onDestroy:a}}]),angular.module("ar-toolkit").factory("ARObject",function(){function e(){var e=new THREE.Object3D;return e.matrixAutoUpdate=!1,e}function t(e){var t=new THREE.CubeGeometry(100,100,100),r=new THREE.MeshPhongMaterial({color:e,side:THREE.DoubleSide}),n=new THREE.Mesh(t,r);return n.position.z=-40,n}function r(r){function n(e){a.transformFromArray(e)}var a=e(),o=t(r.color);return a.add(o),{transform:n,model:a}}return{create:r}}),angular.module("ar-toolkit").factory("ARUtils",["$ionicPlatform",function(e){return{size:function(t){t.width=window.innerWidth,t.height=window.innerHeight,e.ready(function(){t.width=window.innerWidth,t.height=window.innerHeight})}}}]),THREE.Matrix4.prototype.setFromArray=function(e){return this.set(e[0],e[4],e[8],e[12],e[1],e[5],e[9],e[13],e[2],e[6],e[10],e[14],e[3],e[7],e[11],e[15])},THREE.Object3D.prototype.transformFromArray=function(e){this.matrix.setFromArray(e),this.matrixWorldNeedsUpdate=!0};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
