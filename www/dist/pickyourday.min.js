var app=angular.module("ar-toolkit",["ionic"]);angular.module("ar-toolkit").run(["$ionicPlatform",function(e){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}]),angular.module("ar-toolkit").directive("arView",["ARUtils","ARCamera","AR",function(e,n,t){return{restrict:"A",link:function(e,r,a){var o=r[0];n.wait(function(){t.init(o),t.tick()})}}}]),angular.module("ar-toolkit").factory("AR3D",function(){var e=function(e){function n(){o.needsUpdate=!0}var t=new THREE.Camera,r=new THREE.Scene,a=new THREE.PlaneGeometry(2,2,0),o=new THREE.Texture(e),i=new THREE.MeshBasicMaterial({map:o,depthTest:!1,depthWrite:!1}),c=new THREE.Mesh(a,i);return r.add(c),{camera:t,scene:r,update:n}},n=function(){function e(e){t.add(e)}function n(e){t.remove(e)}var t=new THREE.Scene,r=new THREE.Camera;return{scene:t,camera:r,add:e,remove:n}},t=function(t,r,a){function o(){d.render(l.scene,l.camera),d.render(w.scene,w.camera)}function i(){l.update()}function c(e){w.add(e.model)}function u(e){w.remove(e.model)}var d=new THREE.WebGLRenderer({canvas:t});d.setSize(r.width,r.height),d.autoClear=!1;var l=new e(a),w=new n,f=new THREE.SpotLight(16777215);return f.position.set(0,0,9e3),f.lookAt(new THREE.Vector3(0,0,0)),w.scene.add(f),{add:c,remove:u,update:i,render:o,glCanvas:t}};return{create:t}}),angular.module("ar-toolkit").factory("ARCamera",["ARUtils",function(e){var n=document.createElement("video");e.fullPage(n);var t=function(e,n,t){var r=void 0;return navigator.getUserMedia?r=navigator.getUserMedia(e,n,t):navigator.webkitGetUserMedia&&(r=navigator.webkitGetUserMedia(e,n,t)),r},r=function(e){return function(t){var r=window.URL||window.webkitURL;n.src=r.createObjectURL(t),n.play(),e()}},a=function(e){console.log("An error occured! "+e)},o=function(e){t({video:!0,audio:!1},r(e),a)},i=function(){return{width:n.width,height:n.height}},c=function(e){e.drawImage(n,0,0)};return{wait:o,copyToContext:c,getDimensions:i}}]),angular.module("ar-toolkit").factory("ARDetector",function(){function e(){return{}}return{create:e}}),angular.module("ar-toolkit").factory("AR",["ARCamera","ARDetector","AR3D",function(e,n,t){var r,a,o,i=function(n){r=document.createElement("canvas");var i=e.getDimensions();r.width=i.width,r.height=i.height,a=r.getContext("2d"),o=t.create(n,i,r)},c=function(){e.copyToContext(a),r.changed=!0,o.update(),o.render(),window.requestAnimationFrame(c)};return{init:i,tick:c}}]),angular.module("ar-toolkit").factory("ARUtils",function(){return{fullPage:function(e){e.width=window.innerWidth,e.height=window.innerHeight}}});
//# sourceMappingURL=data:application/json;base64,
