var app=angular.module("ar-toolkit",["ionic"]);angular.module("ar-toolkit").run(["$ionicPlatform",function(e){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}]),angular.module("ar-toolkit").directive("arView",["ARUtils","ARCamera","AR","$ionicPlatform",function(e,t,r,n){return{restrict:"A",link:function(a,o,i){var c=o[0];n.ready(function(){e.size(c),e.setVideoSize(),t.wait(function(){r.init(c),r.tick()})})}}}]),angular.module("ar-toolkit").factory("AR3D",function(){var e=function(e){function t(){o.needsUpdate=!0}var r=new THREE.Camera,n=new THREE.Scene,a=new THREE.PlaneGeometry(2,2,0),o=new THREE.Texture(e);o.generateMipmaps=!1,o.minFilter=THREE.NearestFilter,o.magFilter=THREE.NearestFilter,o.wrapS=o.wrapT=THREE.ClampToEdgeWrapping;var i=new THREE.MeshBasicMaterial({map:o,depthTest:!1,depthWrite:!1}),c=new THREE.Mesh(a,i);return n.add(c),{camera:r,scene:n,update:t}},t=function(){function e(e){n.add(e)}function t(e){n.remove(e)}function r(e){a.projectionMatrix.setFromArray(e)}var n=new THREE.Scene,a=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3);return{scene:n,camera:a,add:e,remove:t,setProjectionMatrix:r}},r=function(r,n,a){function o(){l.render(m.scene,m.camera),v.rotation.x+=.1,v.rotation.y+=.1,l.render(s.scene,s.camera)}function i(){m.update()}function c(e){s.add(e.model)}function u(e){}function d(e){s.remove(e.model)}var l=new THREE.WebGLRenderer({canvas:r});l.setSize(n.width,n.height),l.autoClear=!1;var m=new e(a),s=new t,f=new THREE.SpotLight(16777215);f.position.set(0,0,9e3),f.lookAt(new THREE.Vector3(0,0,0)),s.scene.add(f);var w=new THREE.BoxGeometry(1,1,1),g=new THREE.MeshBasicMaterial({color:65280}),v=new THREE.Mesh(w,g);return s.add(v),v.position.z=-5,{add:c,remove:d,update:i,render:o,glCanvas:r,setCameraMatrix:u}};return{create:r}}),angular.module("ar-toolkit").factory("ARCamera",["ARUtils","$ionicPlatform",function(e,t){var r=document.getElementById("video"),n=function(e,t,r){var n=void 0;return navigator.getUserMedia?n=navigator.getUserMedia(e,t,r):navigator.webkitGetUserMedia&&(n=navigator.webkitGetUserMedia(e,t,r)),n},a=function(e){return function(t){var n=window.URL||window.webkitURL;r.src=n.createObjectURL(t),r.play(),e()}},o=function(e){console.log("An error occured! "+e)},i=function(e){n({video:!0,audio:!1},a(e),o)},c=function(){return{width:r.width,height:r.height}},u=function(e){e.drawImage(r,0,0)};return{wait:i,copyToContext:u,getDimensions:c}}]),angular.module("ar-toolkit").factory("ARDetector",function(){function e(e){var t=new NyARRgbRaster_Canvas2D(e),r=new FLARParam(e.width,e.height),n=new FLARMultiIdMarkerDetector(r,120);n.setContinueMode(!0);var a=function(e){var t=n.getIdMarkerData(e);if(t.packetLength>4)return-1;for(var r=0,a=0;a<t.packetLength;a++)r=r<<8|t.getPacketData(a);return r},o=function(e){var t=new NyARTransMatResult;n.getTransformMatrix(e,t);var r=new Float32Array(16);return r[0]=t.m00,r[1]=-t.m10,r[2]=t.m20,r[3]=0,r[4]=t.m01,r[5]=-t.m11,r[6]=t.m21,r[7]=0,r[8]=-t.m02,r[9]=t.m12,r[10]=-t.m22,r[11]=0,r[12]=t.m03,r[13]=-t.m13,r[14]=t.m23,r[15]=1,r},i=function(e,t){var n=new Float32Array(16);return r.copyCameraMatrix(n,e,t),n},c=1,u=function(e,t){return{id:e,matrix:t,age:c}},d={},l=function(e,r,i){for(var l=n.detectMarkerLite(t,70),m=0;l>m;m++){var s=a(m),f=d[s];void 0===f?(f=u(s,o(m)),d[s]=f,e(f)):(f.matrix=o(m),f.age=c,r(f))}for(var s in d){var f=d[s];f&&0==f.age--&&(i(f),delete d[s])}};return{detect:l,getCameraMatrix:i}}return{create:e}}),angular.module("ar-toolkit").factory("AR",["ARCamera","ARDetector","AR3D","ARMarker",function(e,t,r,n){var a,o,i,c,u=function(n){a=document.createElement("canvas");var u=e.getDimensions();a.width=u.width,a.height=u.height,o=a.getContext("2d"),i=t.create(a),c=r.create(n,u,a),c.setCameraMatrix(i.getCameraMatrix(10,1e3))},d=function(){e.copyToContext(o),a.changed=!0,c.update(),c.render(),window.requestAnimationFrame(d)};return{init:u,tick:d}}]),angular.module("ar-toolkit").factory("ARMarker",["ARObject",function(e){var t={16:e.create({color:13369344}),32:e.create({color:52224}),64:e.create({color:204})},r=function(e){return function(r){console.log("Created"),console.log(r.id);var n=t[r.id];n.transform(r.matrix),e.add(n)}},n=function(e){return function(e){console.log("update"),console.log(e.id);var r=t[e.id];r.transform(e.matrix)}},a=function(e){return function(r){console.log("remove"),console.log(r.id);var n=t[r.id];e.remove(n)}};return{onCreate:r,onUpdate:n,onDestroy:a}}]),angular.module("ar-toolkit").factory("ARObject",function(){function e(){var e=new THREE.Object3D;return e.matrixAutoUpdate=!1,e}function t(e){var t=new THREE.CubeGeometry(100,100,100),r=new THREE.MeshPhongMaterial({color:e,side:THREE.DoubleSide}),n=new THREE.Mesh(t,r);return n.position.z=-50,n}function r(r){function n(e){a.transformFromArray(e)}var a=e(),o=t(r.color);return a.add(o),{transform:n,model:a}}return{create:r}}),angular.module("ar-toolkit").factory("ARUtils",["$ionicPlatform",function(e){var t=function(e){e.width=window.innerWidth,e.height=window.innerHeight};return{size:t,setVideoSize:function(){t(document.getElementById("video"))}}}]),THREE.Matrix4.prototype.setFromArray=function(e){return this.set(e[0],e[4],e[8],e[12],e[1],e[5],e[9],e[13],e[2],e[6],e[10],e[14],e[3],e[7],e[11],e[15])},THREE.Object3D.prototype.transformFromArray=function(e){this.matrix.setFromArray(e),this.matrixWorldNeedsUpdate=!0};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
