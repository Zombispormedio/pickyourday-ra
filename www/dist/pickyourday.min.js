var app=angular.module("ar-toolkit",["ionic"]);angular.module("ar-toolkit").run(["$ionicPlatform",function(e){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}]),angular.module("ar-toolkit").directive("arView",["ARUtils","ARCamera","AR",function(e,t,n){return{restrict:"A",link:function(r,a,i){var o=a[0];e.size(o),t.wait(function(){n.init(o),n.tick()})}}}]),angular.module("ar-toolkit").factory("AR3D",function(){var e=function(e){function t(){i.needsUpdate=!0}var n=new THREE.Camera,r=new THREE.Scene,a=new THREE.PlaneGeometry(2,2,0),i=new THREE.Texture(e);i.generateMipmaps=!1,i.minFilter=THREE.NearestFilter,i.magFilter=THREE.NearestFilter,i.wrapS=i.wrapT=THREE.ClampToEdgeWrapping;var o=new THREE.MeshBasicMaterial({map:i,depthTest:!1,depthWrite:!1}),c=new THREE.Mesh(a,o);return r.add(c),{camera:n,scene:r,update:t}},t=function(){function e(e){n.add(e)}function t(e){n.remove(e)}var n=new THREE.Scene,r=new THREE.Camera;return{scene:n,camera:r,add:e,remove:t}},n=function(n,r,a){function i(){u.render(l.scene,l.camera),u.render(w.scene,w.camera)}function o(){l.update()}function c(e){w.add(e.model)}function d(e){w.remove(e.model)}var u=new THREE.WebGLRenderer({canvas:n});u.setSize(r.width,r.height),u.autoClear=!1;var l=new e(a),w=new t,s=new THREE.SpotLight(16777215);return s.position.set(0,0,9e3),s.lookAt(new THREE.Vector3(0,0,0)),w.scene.add(s),{add:c,remove:d,update:o,render:i,glCanvas:n}};return{create:n}}),angular.module("ar-toolkit").factory("ARCamera",["ARUtils",function(e){var t=document.getElementById("video");e.size(t);var n=function(e,t,n){var r=void 0;return navigator.getUserMedia?r=navigator.getUserMedia(e,t,n):navigator.webkitGetUserMedia&&(r=navigator.webkitGetUserMedia(e,t,n)),r},r=function(e){return function(n){var r=window.URL||window.webkitURL;t.src=r.createObjectURL(n),t.play(),e()}},a=function(e){console.log("An error occured! "+e)},i=function(e){n({video:!0,audio:!1},r(e),a)},o=function(){return{width:t.width,height:t.height}},c=function(e){e.drawImage(t,0,0)};return{wait:i,copyToContext:c,getDimensions:o}}]),angular.module("ar-toolkit").factory("ARDetector",function(){function e(){return{}}return{create:e}}),angular.module("ar-toolkit").factory("AR",["ARCamera","ARDetector","AR3D",function(e,t,n){var r,a,i,o=function(t){r=document.createElement("canvas");var o=e.getDimensions();r.width=o.width,r.height=o.height,a=r.getContext("2d"),i=n.create(t,o,r)},c=function(){e.copyToContext(a),r.changed=!0,i.update(),i.render(),window.requestAnimationFrame(c)};return{init:o,tick:c}}]),angular.module("ar-toolkit").factory("ARUtils",["$ionicPlatform",function(e){return{size:function(t){t.width=window.innerWidth,t.height=window.innerHeight,e.ready(function(){t.width=window.innerWidth,t.height=window.innerHeight})}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
