var app=angular.module("ar-toolkit",["ionic"]);angular.module("ar-toolkit").run(["$ionicPlatform",function(e){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}]),angular.module("ar-toolkit").directive("arView",["ARUtils","ARCamera","AR","$ionicPlatform",function(e,t,r,n){return{restrict:"A",link:function(o,a,i){var c=a[0];n.ready(function(){e.size(c),e.setVideoSize(),t.wait(function(){r.init(c),r.tick()})})}}}]),angular.module("ar-toolkit").factory("AR3D",function(){var e=function(e){function t(){a.needsUpdate=!0}var r=new THREE.Camera,n=new THREE.Scene,o=new THREE.PlaneGeometry(2,2,0),a=new THREE.Texture(e);a.generateMipmaps=!1,a.minFilter=THREE.NearestFilter,a.magFilter=THREE.NearestFilter,a.wrapS=a.wrapT=THREE.ClampToEdgeWrapping;var i=new THREE.MeshBasicMaterial({map:a,depthTest:!1,depthWrite:!1}),c=new THREE.Mesh(o,i);return n.add(c),{camera:r,scene:n,update:t}},t=function(){function e(e){r.add(e)}function t(e){r.remove(e)}var r=new THREE.Scene,n=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3);return{scene:r,camera:n,add:e,remove:t}},r=function(r,n,o){function a(){d.render(l.scene,l.camera),d.render(m.scene,m.camera)}function i(){l.update()}function c(e){m.add(e.model)}function u(e){m.remove(e.model)}var d=new THREE.WebGLRenderer({canvas:r});d.setSize(n.width,n.height),d.autoClear=!1;var l=new e(o),m=new t,s=new THREE.SpotLight(16777215);return s.position.set(0,0,9e3),s.lookAt(new THREE.Vector3(0,0,0)),m.scene.add(s),{add:c,remove:u,update:i,render:a,glCanvas:r}};return{create:r}}),angular.module("ar-toolkit").factory("ARCamera",["ARUtils","$ionicPlatform",function(e,t){var r=document.getElementById("video"),n=function(e,t,r){var n=void 0;return navigator.getUserMedia?n=navigator.getUserMedia(e,t,r):navigator.webkitGetUserMedia&&(n=navigator.webkitGetUserMedia(e,t,r)),n},o=function(e){return function(t){var n=window.URL||window.webkitURL;r.src=n.createObjectURL(t),r.play(),e()}},a=function(e){console.log("An error occured! "+e)},i=function(e){n({video:!0,audio:!1},o(e),a)},c=function(){return{width:r.width,height:r.height}},u=function(e){e.drawImage(r,0,0)};return{wait:i,copyToContext:u,getDimensions:c}}]),angular.module("ar-toolkit").factory("ARDetector",function(){function e(e){var t=new NyARRgbRaster_Canvas2D(e),r=new FLARParam(e.width,e.height),n=new FLARMultiIdMarkerDetector(r,120);n.setContinueMode(!0);var o=function(e){var t=n.getIdMarkerData(e);if(t.packetLength>4)return-1;for(var r=0,o=0;o<t.packetLength;o++)r=r<<8|t.getPacketData(o);return r},a=function(e){var t=new NyARTransMatResult;n.getTransformMatrix(e,t);var r=new Float32Array(16);return r[0]=t.m00,r[1]=-t.m10,r[2]=t.m20,r[3]=0,r[4]=t.m01,r[5]=-t.m11,r[6]=t.m21,r[7]=0,r[8]=-t.m02,r[9]=t.m12,r[10]=-t.m22,r[11]=0,r[12]=t.m03,r[13]=-t.m13,r[14]=t.m23,r[15]=1,r},i=function(e,t){var n=new Float32Array(16);return r.copyCameraMatrix(n,e,t),n},c=1,u=function(e,t){return{id:e,matrix:t,age:c}},d={},l=function(e,r,i){for(var l=n.detectMarkerLite(t,70),m=0;l>m;m++){var s=o(m),f=d[s];void 0===f?(f=u(s,a(m)),d[s]=f,e(f)):(f.matrix=a(m),f.age=c,r(f))}for(var s in d){var f=d[s];f&&0==f.age--&&(i(f),delete d[s])}};return{detect:l,getCameraMatrix:i}}return{create:e}}),angular.module("ar-toolkit").factory("AR",["ARCamera","ARDetector","AR3D","ARMarker",function(e,t,r,n){var o,a,i,c,u=function(n){o=document.createElement("canvas");var u=e.getDimensions();o.width=u.width,o.height=u.height,a=o.getContext("2d"),i=t.create(o),c=r.create(n,u,o),console.log(i.getCameraMatrix(10,1e3))},d=function(){e.copyToContext(a),o.changed=!0,i.detect(n.onCreate(c),n.onUpdate(c),n.onDestroy(c)),c.update(),c.render(),window.requestAnimationFrame(d)};return{init:u,tick:d}}]),angular.module("ar-toolkit").factory("ARMarker",["ARObject",function(e){var t={16:e.create({color:13369344}),32:e.create({color:52224}),64:e.create({color:204})},r=function(e){return function(r){console.log("Created"),console.log(r.id);var n=t[r.id];console.log(n);var o=n.model;o.rotation.x+=.1,o.rotation.y+=.1,e.add(n)}},n=function(e){return function(e){console.log("update"),console.log(e.id);var r=t[e.id],n=r.model;n.rotation.x+=.1,n.rotation.y+=.1}},o=function(e){return function(r){console.log("remove"),console.log(r.id);var n=t[r.id];e.remove(n)}};return{onCreate:r,onUpdate:n,onDestroy:o}}]),angular.module("ar-toolkit").factory("ARObject",function(){function e(e){var t=new THREE.BoxGeometry(1,1,1),r=new THREE.MeshBasicMaterial({color:e}),n=new THREE.Mesh(t,r);return n.position.z=-5,n}function t(t){var r=e(t.color);return{model:r}}return{create:t}}),angular.module("ar-toolkit").factory("ARUtils",["$ionicPlatform",function(e){var t=function(e){e.width=window.innerWidth,e.height=window.innerHeight};return{size:t,setVideoSize:function(){t(document.getElementById("video"))}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
