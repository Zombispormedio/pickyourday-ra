function saveLocal(e,t){localStorage[e]=JSON.stringify(t)}function getJSONLocal(e){var t=null;try{var i=localStorage[e];void 0!==i&&(t=JSON.parse(i))}catch(r){}return t}function deleteLocal(e){localStorage.removeItem(e)}function ClosureMessage(e){return function(t){return function(){t(e)}}}function emptyOrUndefined(e){return void 0==e||""===e}function RandPosition(e){var t=e||{min:0,max:100},i=chance.floating(t),r=chance.floating(t),a=chance.floating(t);return[i,r,a]}function RandColor(e){var t=e||{min:0,max:1,fixed:2},i=chance.floating(t),r=chance.floating(t),a=chance.floating(t);return[i,r,a,1]}function RandSize(e){var t=e||{min:.1,max:2,fixed:1},i=chance.floating(t);return[i,i,i]}function RandRotation(e){var t=Number(chance.bool()),i=Number(chance.bool()),r=Number(chance.bool());return{angle:chance.integer({min:0,max:360}),axis:[t,i,r]}}function generate(e){return function(){var t=chance.integer({min:0,max:100});return Array.apply(0,Array(t)).map(e)}}function degInRad(e){return e*Math.PI/180}var app=angular.module("artoolkit",["ionic","ngResource","ngWebworker"]);angular.module("artoolkit").run(["$ionicPlatform","$rootScope","$state",function(e,t,i){t.go=function(e,t){i.go(e,t)},e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}]),angular.module("artoolkit").config(["$stateProvider","$urlRouterProvider","$httpProvider",function(e,t,i){e.state("login",{url:"/login",onEnter:["$rootScope",function(e){getJSONLocal("user")&&e.go("app.ar")}],templateUrl:"src/views/login/main.html",controller:"LoginCtrl"}).state("app",{url:"/",onEnter:["$rootScope",function(e){getJSONLocal("user")||e.go("login")}],templateUrl:"src/views/main.html",controller:"AppCtrl","abstract":!0}).state("app.ar",{url:"ar",onEnter:["$rootScope",function(e){getJSONLocal("user")||e.go("login")}],views:{content:{templateUrl:"src/views/ar/main.html",controller:"ARCtrl"}}}),t.otherwise("/login"),i.interceptors.push("AuthInterceptor")}]),angular.module("artoolkit").controller("AppCtrl",["$rootScope","$scope","OauthService",function(e,t,i){e.onModal=!1,t.logout=function(){i.logout().Session(function(t){var i=t;i.error||(deleteLocal("user"),e.go("login"))})}}]),angular.module("artoolkit").controller("ARCtrl",["$rootScope","$scope","ARObject","$ionicLoading","CustomerService","$timeout","$ionicModal",function(e,t,i,r,a,n,s){var o=new THREE.ColladaLoader,h=function(){r.show({template:"Loading..."})},c=function(){r.hide()},l=!1,u=new THREE.Clock;t.onUpdate=function(){THREE.AnimationHandler.update(u.getDelta())},t.actions={onCreate:function(e,t){l||(l=!0,h(),d(t.id,e))}};var d=function(e,t){async.waterfall([function(t){a.AR().collada({marker_id:e},function(e){var i=e.data;t(null,{url:i.collada,message:i.collada})})},function(e,t){o.load(e.url,function(i){e.collada=i,t(null,e)})},function(e,i){var r=e.collada;r.scene.rotation.x=degInRad(-90),r.scene.traverse(function(a){if(a instanceof THREE.SkinnedMesh){var n=new THREE.Animation(a,a.geometry.animation);n.play(),t.camera.lookAt(a.position),e.scene=r.scene,e.animation=n,i(null,e)}}),t.add(r.scene)}],function(e,i){n(function(){i.animation.stop(),t.remove(i.scene),p()},1e4),c()})};s.fromTemplateUrl("modal.html",{scope:t,animation:"slide-in-up"}).then(function(e){t.modal=e});var p=function(){e.onModal=!0,t.modal.show()};t.closeModal=function(){e.onModal=!1,l=!1,t.modal.hide()},t.$on("$destroy",function(){t.modal.remove()})}]),angular.module("artoolkit").controller("LoginCtrl",["$rootScope","$scope","OauthService","RequestService",function(e,t,i,r){t.user={email:"",password:""},t.login=function(){async.waterfall([function(e){var i=emptyOrUndefined(t.user.email),r=emptyOrUndefined(t.user.password);i||r?i?e("Email Empty"):r&&e("Password Empty"):e()},function(e){i.login().Session(t.user,function(t){return t.error?e(t.error):void e(null,t.data)},r.ServerNotFound(e))},function(e,t){i.role().check({role:e.role},function(i){return i.error?t(i.error):void(1==i.data||0==i.data?t(null,e):r.NoRoleAuthorized(t)())},r.ServerNotFound(t))}],function(t,i){return t?alert(t):(saveLocal("user",i),void e.go("app.ar"))})}}]),angular.module("artoolkit").directive("arView",["ARUtils","ARCamera","AR","$ionicPlatform",function(e,t,i,r){return{restrict:"A",scope:{actions:"=actions",onUpdate:"=onUpdate",onInit:"=onInit"},link:function(a,n,s){var o=n[0];r.ready(function(){e.size(o),e.setVideoSize(),t.wait(function(){i.init(o,a.actions,a.onInit,a.onUpdate),i.tick()})})}}}]),angular.module("artoolkit").factory("ApiService",["$resource","$location",function(e,t){return{env:"prod",prod:{protocol:"https",host:"pickyourday.herokuapp.com",port:"",root:"api"},dev:{protocol:"http",host:"localhost",port:"5000",root:"api"},getApiPath:function(e){var t=this[this.env];return t.protocol+"://"+t.host+(""!==t.port?":"+t.port:"")+"/"+t.root+"/"+e},rest:function(t,i,r){var a=e(this.getApiPath(t),r||{},i||{});return a}}}]),angular.module("artoolkit").factory("CustomerService",["ApiService",function(e){return{base:"customer",AR:function(){return e.rest(this.base+"/augmented_reality/:marker_id",{collada:{method:"GET",params:{marker_id:"@marker_id"}}})}}}]),angular.module("artoolkit").factory("AuthInterceptor",["$q","$location",function(e,t){return{request:function(e){e.headers=e.headers||{};var t=getJSONLocal("user"),t=getJSONLocal("user");return!e.headers.Authorization&&t&&(e.headers.Authorization=t.token),e},requestError:function(t){return e.reject(t)},response:function(t){return"ERROR"===t.data.status?e.reject(t):t||e.when(t)},responseError:function(i){return 403===i.status?(console.error("Error de acceso"),localStorage.user="",void t.path("/")):e.reject(i)}}}]),angular.module("artoolkit").factory("OauthService",["ApiService",function(e){return{base:"oauth",login:function(){return e.rest(this.base,{Session:{method:"POST",params:{}}})},logout:function(){return e.rest(this.base+"/logout",{Session:{method:"GET",params:{}}})},role:function(){return e.rest(this.base+"/role/:role",{check:{method:"GET",params:{role:"@role"}}})}}}]),angular.module("artoolkit").factory("RequestService",function(){return{ServerNotFound:ClosureMessage("Server Not Found"),NoRoleAuthorized:ClosureMessage("No Role Authorized")}}),angular.module("artoolkit").factory("AR3D",function(){var e=function(e){function t(){n.needsUpdate=!0}var i=new THREE.Camera,r=new THREE.Scene,a=new THREE.PlaneGeometry(2,2,0),n=new THREE.Texture(e);n.generateMipmaps=!1,n.minFilter=THREE.NearestFilter,n.magFilter=THREE.NearestFilter,n.wrapS=n.wrapT=THREE.ClampToEdgeWrapping;var s=new THREE.MeshBasicMaterial({map:n,depthTest:!1,depthWrite:!1}),o=new THREE.Mesh(a,s);return r.add(o),{camera:i,scene:r,update:t}},t=function(){function e(e){i.add(e)}function t(e){i.remove(e)}var i=new THREE.Scene,r=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1e4);return r.position.set(0,-50,500),{scene:i,camera:r,add:e,remove:t}},i=function(i,r,a){function n(){c.clear(),c.render(l.scene,l.camera),c.render(u.scene,u.camera)}function s(){l.update()}function o(e){u.add(e)}function h(e){u.remove(e)}var c=new THREE.WebGLRenderer({canvas:i,antialias:!0});c.setSize(r.width,r.height),c.setPixelRatio(window.devicePixelRatio),c.autoClear=!1;var l=new e(a),u=new t,d=new THREE.DirectionalLight(16777215,.5);return d.position.set(-5,-5,1e4).normalize(),u.scene.add(d),{add:o,remove:h,update:s,render:n,glCanvas:i,virtual:u.scene,camera:u.camera}};return{create:i}}),angular.module("artoolkit").factory("ARCamera",["ARUtils","$ionicPlatform",function(e,t){var i=document.getElementById("video"),r=function(e,t,i){var r=void 0;return navigator.getUserMedia?r=navigator.getUserMedia(e,t,i):navigator.webkitGetUserMedia&&(r=navigator.webkitGetUserMedia(e,t,i)),r},a=function(e){return function(t){var r=window.URL||window.webkitURL;i.src=r.createObjectURL(t),i.play(),e()}},n=function(e){console.log("An error occured! "+e)},s=function(e){r({video:!0,audio:!1},a(e),n)},o=function(){return{width:i.width,height:i.height}},h=function(e){e.drawImage(i,0,0)};return{wait:s,copyToContext:h,getDimensions:o}}]),angular.module("artoolkit").factory("ARDetector",function(){function e(e){var t=new NyARRgbRaster_Canvas2D(e),i=new FLARParam(e.width,e.height),r=new FLARMultiIdMarkerDetector(i,120);r.setContinueMode(!0);var a=function(e){var t=r.getIdMarkerData(e);if(t.packetLength>4)return-1;for(var i=0,a=0;a<t.packetLength;a++)i=i<<8|t.getPacketData(a);return i},n=function(e){var t=new NyARTransMatResult;r.getTransformMatrix(e,t);var i=new Float32Array(16);return i[0]=t.m00,i[1]=-t.m10,i[2]=t.m20,i[3]=0,i[4]=t.m01,i[5]=-t.m11,i[6]=t.m21,i[7]=0,i[8]=-t.m02,i[9]=t.m12,i[10]=-t.m22,i[11]=0,i[12]=t.m03,i[13]=-t.m13,i[14]=t.m23,i[15]=1,i},s=function(e,t){var r=new Float32Array(16);return i.copyCameraMatrix(r,e,t),r},o=1,h=function(e,t){return{id:e,matrix:t,age:o}},c={},l=function(e,i,s){for(var l=r.detectMarkerLite(t,70),u=0;l>u;u++){var d=a(u),p=c[d];void 0===p?(p=h(d,n(u)),c[d]=p,e&&e(p)):(p.matrix=n(u),p.age=o,i&&i(p))}for(var d in c){var p=c[d];p&&0==p.age--&&(s&&s(p),delete c[d])}};return{detect:l,getCameraMatrix:s}}return{create:e}}),angular.module("artoolkit").factory("AR",["ARCamera","ARDetector","AR3D","ARMarker",function(e,t,i,r){var a,n,s,o,h,c,l=function(l,u,d,p){u=u||{},h={},c=p,a=document.createElement("canvas");var m=e.getDimensions();a.width=m.width,a.height=m.height,n=a.getContext("2d"),s=t.create(a),o=i.create(l,m,a),h.onCreate=r.Primitive(o,u.onCreate||r.onCreate),(u.onCreate&&u.onUpdate&&u.onDestroy||!u.onCreate)&&(h.onUpdate=r.Primitive(o,u.onUpdate||r.onUpdate),h.onDestroy=r.Primitive(o,u.onDestroy||r.onDestroy)),d&&d(o)},u=function(){e.copyToContext(n),a.changed=!0,s.detect(h.onCreate,h.onUpdate,h.onDestroy),o.update(),c&&c(),o.render(),window.requestAnimationFrame(u)};return{init:l,tick:u,view:o}}]),angular.module("artoolkit").factory("ARMarker",["ARObject",function(e){var t={16:e.createBasicCube({color:13369344}),32:e.createBasicCube({color:52224}),64:e.createBasicCube({color:204})},i=function(e,i){console.log("Created"),console.log(i.id);var r=t[i.id];r.rotation.x+=.1,r.rotation.y+=.1,e.add(r)},r=function(e,i){console.log("update"),console.log(i.id);var r=t[i.id];r.rotation.x+=.1,r.rotation.y+=.1},a=function(e,i){console.log("remove"),console.log(i.id);var r=t[i.id];e.remove(r)},n=function(e,t){return function(i){t(e,i)}};return{Primitive:n,onCreate:i,onUpdate:r,onDestroy:a}}]),angular.module("artoolkit").factory("ARObject",function(){return{createBasicCube:function(e){var t=new THREE.BoxGeometry(1,1,1),i=new THREE.MeshBasicMaterial({color:e}),r=new THREE.Mesh(t,i);return r.position.z=-5,r},createPhongCube:function(){var e=new THREE.BoxGeometry(1,1,1),t=new THREE.MeshPhongMaterial({color:8375321,shininess:230}),i=new THREE.Mesh(e,t);return i},createGradientPlane:function(){var e=document.createElement("canvas");e.width=128,e.height=128;var t=e.getContext("2d"),i=t.createRadialGradient(e.width/2,e.height/2,0,e.width/2,e.height/2,e.width/2);i.addColorStop(.1,"rgba(210,210,210,1)"),i.addColorStop(1,"rgba(255,255,255,1)"),t.fillStyle=i,t.fillRect(0,0,e.width,e.height);var r=new THREE.Texture(e);r.needsUpdate=!0;var a=new THREE.MeshBasicMaterial({map:r}),n=new THREE.PlaneBufferGeometry(300,300,1,1),s=new THREE.Mesh(n,a);return s},createIcosahedron:function(){for(var e,t,i,r,a=1,n=["a","b","c"],s=new THREE.IcosahedronGeometry(a,1),o=0;o<s.faces.length;o++){t=s.faces[o];for(var h=0;3>h;h++)r=t[n[h]],i=s.vertices[r],e=new THREE.Color(16777215),e.setHSL((i.y/a+1)/2,1,.5),t.vertexColors[h]=e}var c=[new THREE.MeshPhongMaterial({color:16777215,shading:THREE.FlatShading,vertexColors:THREE.VertexColors,shininess:0}),new THREE.MeshBasicMaterial({color:0,shading:THREE.FlatShading,wireframe:!0,transparent:!0})];return THREE.SceneUtils.createMultiMaterialObject(s,c)}}}),angular.module("artoolkit").factory("ARUtils",["$ionicPlatform",function(e){var t=function(e){e.width=window.innerWidth,e.height=window.innerHeight};return{size:t,setVideoSize:function(){t(document.getElementById("video"))}}}]),THREE.ColladaLoader=function(){function e(e,i,r,a){var n=0;if(document.implementation&&document.implementation.createDocument){var s=new XMLHttpRequest;s.onreadystatechange=function(){4===s.readyState?0===s.status||200===s.status?s.response?(Ue=i,t(s.response,void 0,e)):a?a({type:"error",url:e}):console.error("ColladaLoader: Empty or non-existing file ("+e+")"):a?a({type:"error",url:e}):console.error("ColladaLoader: Couldn't load \""+e+'" ('+s.status+")"):3===s.readyState&&r&&(0===n&&(n=s.getResponseHeader("Content-Length")),r({total:n,loaded:s.responseText.length}))},s.open("GET",e,!0),s.send(null)}else alert("Don't know how to parse XML!")}function t(e,t,i){if(Ie=(new DOMParser).parseFromString(e,"text/xml"),t=t||Ue,void 0!==i){var h=i.split("/");h.pop(),Oe=(h.length<1?".":h.join("/"))+"/"}r(),we(),ze=a("library_images image",N,"image"),Ve=a("library_materials material",X,"material"),Be=a("library_effects effect",$,"effect"),Fe=a("library_geometries geometry",I,"geometry"),Xe=a("library_cameras camera",re,"camera"),Ge=a("library_lights light",ne,"light"),De=a("library_controllers controller",A,"controller"),We=a("library_animations animation",Q,"animation"),Se=a("library_visual_scenes visual_scene",M,"visual_scene"),_e=a("library_kinematics_models kinematics_model",oe,"kinematics_model"),je=[],Le=[],Ae=n(),Pe=new THREE.Group;for(var c=0;c<Ae.nodes.length;c++)Pe.add(v(Ae.nodes[c]));Pe.scale.multiplyScalar(Ze),o(),He=s(),g();var l={scene:Pe,morphs:je,skins:Le,animations:Ce,kinematics:Me,dae:{images:ze,materials:Ve,cameras:Xe,lights:Ge,effects:Be,geometries:Fe,controllers:De,animations:We,visualScenes:Se,visualScene:Ae,scene:Ae,kinematicsModels:_e,kinematicsModel:He}};return t&&t(l),l}function i(e){Ke=e}function r(){var e=Ie.querySelectorAll("asset"),t=e[0];if(t&&t.childNodes)for(var i=0;i<t.childNodes.length;i++){var r=t.childNodes[i];switch(r.nodeName){case"unit":var a=r.getAttribute("meter");a&&(Ze=parseFloat(a));break;case"up_axis":$e=r.textContent.charAt(0)}}}function a(e,t,i){for(var r=Ie.querySelectorAll(e),a={},n=0,s=r.length,o=0;s>o;o++){var h=r[o],c=(new t).parse(h);c.id&&0!==c.id.length||(c.id=i+n++),a[c.id]=c}return a}function n(){var e=Ie.querySelectorAll("scene instance_visual_scene")[0];if(e){var t=e.getAttribute("url").replace(/^#/,"");return Se[t.length>0?t:"visual_scene0"]}return null}function s(){var e=Ie.querySelectorAll("instance_kinematics_model")[0];if(e){var t=e.getAttribute("url").replace(/^#/,"");return _e[t.length>0?t:"kinematics_model0"]}return null}function o(){Ce=[],h(Pe)}function h(e){var t=Ae.getChildById(e.colladaId,!0),i=null;if(t&&t.keys){i={fps:60,hierarchy:[{node:t,keys:t.keys,sids:t.sids}],node:e,name:"animation_"+e.name,length:0},Ce.push(i);for(var r=0,a=t.keys.length;a>r;r++)i.length=Math.max(i.length,t.keys[r].time)}else i={hierarchy:[{keys:[],sids:[]}]};for(var r=0,a=e.children.length;a>r;r++)for(var n=h(e.children[r]),s=0,o=n.hierarchy.length;o>s;s++)i.hierarchy.push({keys:[],sids:[]});return i}function c(){var e,t=1e6,i=-t,r=0;for(var a in We){var n=We[a];e=e||n.id;for(var s=0;s<n.sampler.length;s++){var o=n.sampler[s];o.create(),t=Math.min(t,o.startTime),i=Math.max(i,o.endTime),r=Math.max(r,o.input.length)}}return{start:t,end:i,frames:r,ID:e}}function l(e,t){var i=t instanceof O?De[t.url]:t;if(!i||!i.morph)return void console.log("could not find morph controller!");for(var r=i.morph,a=0;a<r.targets.length;a++){var n=r.targets[a],s=Fe[n];if(s.mesh&&s.mesh.primitives&&s.mesh.primitives.length){var o=s.mesh.primitives[0].geometry;o.vertices.length===e.vertices.length&&e.morphTargets.push({name:"target_1",vertices:o.vertices})}}e.morphTargets.push({name:"target_Z",vertices:e.vertices})}function u(e,t,i,r){if(e.world=e.world||new THREE.Matrix4,e.localworld=e.localworld||new THREE.Matrix4,e.world.copy(e.matrix),e.localworld.copy(e.matrix),e.channels&&e.channels.length){var a=e.channels[0],n=a.sampler.output[i];n instanceof THREE.Matrix4&&(e.world.copy(n),e.localworld.copy(n),0===i&&e.matrix.copy(n))}r&&e.world.multiplyMatrices(r,e.world),t.push(e);for(var s=0;s<e.nodes.length;s++)u(e.nodes[s],t,i,e.world)}function d(e,t){for(var i=0;i<e.length;i++){var r=e[i],a=-1;if("JOINT"==r.type){for(var n=0;n<t.joints.length;n++)if(r.sid===t.joints[n]){a=n;break}if(a>=0){var s=t.invBindMatrices[a];r.invBindMatrix=s,r.skinningMatrix=new THREE.Matrix4,r.skinningMatrix.multiplyMatrices(r.world,s),r.animatrix=new THREE.Matrix4,r.animatrix.copy(r.localworld),r.weights=[];for(var n=0;n<t.weights.length;n++)for(var o=0;o<t.weights[n].length;o++){var h=t.weights[n][o];h.joint===a&&r.weights.push(h)}}else console.warn("ColladaLoader: Could not find joint '"+r.sid+"'."),r.skinningMatrix=new THREE.Matrix4,r.weights=[]}}}function p(e){var t=[],i=function(e,t,r){var a={};a.name=t.sid,a.parent=e,a.matrix=t.matrix;var n=[new THREE.Vector3,new THREE.Quaternion,new THREE.Vector3];a.matrix.decompose(n[0],n[1],n[2]),a.pos=[n[0].x,n[0].y,n[0].z],a.scl=[n[2].x,n[2].y,n[2].z],a.rotq=[n[1].x,n[1].y,n[1].z,n[1].w],r.push(a);for(var s in t.nodes)i(t.sid,t.nodes[s],r)};return i(-1,e,t),t}function m(e,t,i){var r=[];u(t,r,-1),d(r,i.skin);for(var a=new THREE.Vector3,n=[],s=0;s<e.vertices.length;s++)n.push(new THREE.Vector3);for(s=0;s<r.length;s++)if("JOINT"==r[s].type)for(var o=0;o<r[s].weights.length;o++){var h=r[s].weights[o],c=h.index,l=h.weight,p=e.vertices[c],m=n[c];a.x=p.x,a.y=p.y,a.z=p.z,a.applyMatrix4(r[s].skinningMatrix),m.x+=a.x*l,m.y+=a.y*l,m.z+=a.z*l}for(var s=0;s<e.vertices.length;s++)e.vertices[s]=n[s]}function f(e,t,i){var r=De[t.url];if(i=void 0!==i?i:40,!r||!r.skin)return void console.log("ColladaLoader: Could not find skin controller.");if(!t.skeleton||!t.skeleton.length)return void console.log("ColladaLoader: Could not find the skeleton for the skin. ");for(var a=c(),n=Ae.getChildById(t.skeleton[0],!0)||Ae.getChildBySid(t.skeleton[0],!0),s=p(n),o=r.skin.joints,h=[],l=0;l<o.length;l++)for(var f=0;f<s.length;f++)s[f].name===o[l]&&(h[l]=s[f]);for(var l=0;l<h.length;l++)for(var f=0;f<h.length;f++)h[l].parent===h[f].name&&(h[l].parent=f);var l,f,g;new THREE.Vector3;for(l=0;l<e.vertices.length;l++)e.vertices[l].applyMatrix4(r.skin.bindShapeMatrix);for(var v=[],y=[],b=r.skin.weights,l=0;l<b.length;l++){var w=new THREE.Vector4(b[l][0]?b[l][0].joint:0,b[l][1]?b[l][1].joint:0,b[l][2]?b[l][2].joint:0,b[l][3]?b[l][3].joint:0),g=new THREE.Vector4(b[l][0]?b[l][0].weight:0,b[l][1]?b[l][1].weight:0,b[l][2]?b[l][2].weight:0,b[l][3]?b[l][3].weight:0);v.push(w),y.push(g)}e.skinIndices=v,e.skinWeights=y,e.bones=h;for(var E={name:a.ID,fps:30,length:a.frames/30,hierarchy:[]},f=0;f<h.length;f++)E.hierarchy.push({parent:h[f].parent,name:h[f].name,keys:[]});for(console.log("ColladaLoader:",a.ID+" has "+h.length+" bones."),m(e,n,r),i=0;i<a.frames;i++){var T=[];u(n,T,i),d(T,r.skin);for(var l=0;l<T.length;l++)for(var f=0;f<E.hierarchy.length;f++)if(E.hierarchy[f].name===T[l].sid){var x={};x.time=i/30,x.matrix=T[l].animatrix,0===i&&(T[l].matrix=x.matrix);var k=[new THREE.Vector3,new THREE.Quaternion,new THREE.Vector3];x.matrix.decompose(k[0],k[1],k[2]),x.pos=[k[0].x,k[0].y,k[0].z],x.scl=[k[2].x,k[2].y,k[2].z],x.rot=k[1],E.hierarchy[f].keys.push(x)}e.animation=E}}function g(){if(He&&0===He.joints.length)return void(Me=void 0);var e={},t=function(t,i){var r=i.getAttribute("id"),a=Ae.getChildById(r,!0),n=He.joints[t];Pe.traverse(function(i){i.colladaId==r&&(e[t]={node:i,transforms:a.transforms,joint:n,position:n.zeroPosition})})};Me={joints:He&&He.joints,getJointValue:function(t){var i=e[t];return i?i.position:void console.log("getJointValue: joint "+t+" doesn't exist")},setJointValue:function(t,i){var a=e[t];if(a){var n=a.joint;if(i>n.limits.max||i<n.limits.min)console.log("setJointValue: joint "+t+" value "+i+" outside of limits (min: "+n.limits.min+", max: "+n.limits.max+")");else if(n["static"])console.log("setJointValue: joint "+t+" is static");else{var s=a.node,o=n.axis,h=a.transforms,c=new THREE.Matrix4;for(r=0;r<h.length;r++){var l=h[r];if(l.sid&&-1!==l.sid.indexOf("joint"+t))switch(n.type){case"revolute":c.multiply(u.makeRotationAxis(o,THREE.Math.degToRad(i)));break;case"prismatic":c.multiply(u.makeTranslation(o.x*i,o.y*i,o.z*i));break;default:console.warn("setJointValue: unknown joint type: "+n.type)}else{var u=new THREE.Matrix4;switch(l.type){case"matrix":c.multiply(l.obj);break;case"translate":c.multiply(u.makeTranslation(l.obj.x,l.obj.y,l.obj.z));break;case"rotate":c.multiply(u.makeRotationAxis(l.obj,l.angle))}}}var d=c.elements,p=Array.prototype.slice.call(d),m=[p[0],p[4],p[8],p[12],p[1],p[5],p[9],p[13],p[2],p[6],p[10],p[14],p[3],p[7],p[11],p[15]];s.matrix.set.apply(s.matrix,m),s.matrix.decompose(s.position,s.quaternion,s.scale)}}else console.log("setJointValue: joint "+t+" doesn't exist")}};var i=Ie.querySelector("scene instance_kinematics_scene");if(i)for(var r=0;r<i.childNodes.length;r++){var a=i.childNodes[r];if(1==a.nodeType)switch(a.nodeName){case"bind_joint_axis":var n=a.getAttribute("target").split("/").pop(),s=a.querySelector("axis param").textContent,o=parseInt(s.split("joint").pop().split(".")[0]),h=Ie.querySelector('[sid="'+n+'"]');if(h){var c=h.parentElement;t(o,c)}}}}function v(e,t){var i,r,a,n,s=new THREE.Object3D,o=!1;for(a=0;a<e.controllers.length;a++){var h=De[e.controllers[a].url];switch(h.type){case"skin":if(Fe[h.skin.source]){var c=new L;c.url=h.skin.source,c.instance_material=e.controllers[a].instance_material,e.geometries.push(c),o=!0,i=e.controllers[a]}else if(De[h.skin.source]){var u=De[h.skin.source];if(r=u,u.morph&&Fe[u.morph.source]){var c=new L;c.url=u.morph.source,c.instance_material=e.controllers[a].instance_material,e.geometries.push(c)}}break;case"morph":if(Fe[h.morph.source]){var c=new L;c.url=h.morph.source,c.instance_material=e.controllers[a].instance_material,e.geometries.push(c),r=e.controllers[a]}console.log("ColladaLoader: Morph-controller partially supported.")}}var d={};for(a=0;a<e.geometries.length;a++){var p,m=e.geometries[a],g=m.instance_material,y=Fe[m.url],b={},w=[],E=0;if(y){if(!y.mesh||!y.mesh.primitives)continue;if(0===s.name.length&&(s.name=y.id),g)for(n=0;n<g.length;n++){var T=g[n],x=Ve[T.target],k=x.instance_effect.url,R=Be[k].shader,N=R.material;if(y.doubleSided){if(!(T.symbol in d)){var A=N.clone();A.side=THREE.DoubleSide,d[T.symbol]=A}N=d[T.symbol]}N.opacity=N.opacity?N.opacity:1,b[T.symbol]=E,w.push(N),p=N,p.name=null===x.name||""===x.name?x.id:x.name,E++}var H,C=p||new THREE.MeshLambertMaterial({color:14540253,side:y.doubleSided?THREE.DoubleSide:THREE.FrontSide}),M=y.mesh.geometry3js;if(E>1)for(C=new THREE.MultiMaterial(w),n=0;n<M.faces.length;n++){var S=M.faces[n];S.materialIndex=b[S.daeMaterial]}void 0!==i?(f(M,i),M.morphTargets.length>0?(C.morphTargets=!0,C.skinning=!1):(C.morphTargets=!1,C.skinning=!0),H=new THREE.SkinnedMesh(M,C,!1),H.name="skin_"+Le.length,Le.push(H)):void 0!==r?(l(M,r),C.morphTargets=!0,H=new THREE.Mesh(M,C),H.name="morph_"+je.length,je.push(H)):H=M.isLineStrip===!0?new THREE.Line(M):new THREE.Mesh(M,C),s.add(H)}}for(a=0;a<e.cameras.length;a++){var _=e.cameras[a],O=Xe[_.url],j=new THREE.PerspectiveCamera(O.yfov,parseFloat(O.aspect_ratio),parseFloat(O.znear),parseFloat(O.zfar));s.add(j)}for(a=0;a<e.lights.length;a++){var I=null,P=e.lights[a],U=Ge[P.url];if(U&&U.technique){var q=U.color.getHex(),z=U.intensity,W=U.distance,D=U.falloff_angle;switch(U.technique){case"directional":I=new THREE.DirectionalLight(q,z,W),I.position.set(0,0,1);break;case"point":I=new THREE.PointLight(q,z,W);break;case"spot":I=new THREE.SpotLight(q,z,W,D),I.position.set(0,0,1);break;case"ambient":I=new THREE.AmbientLight(q)}}I&&s.add(I)}if(s.name=e.name||e.id||"",s.colladaId=e.id||"",s.layer=e.layer||"",s.matrix=e.matrix,s.matrix.decompose(s.position,s.quaternion,s.scale),Ye.centerGeometry&&s.geometry){var F=s.geometry.center();F.multiply(s.scale),F.applyQuaternion(s.quaternion),s.position.sub(F)}for(a=0;a<e.nodes.length;a++)s.add(v(e.nodes[a],e));return s}function y(e){for(var t=Ie.querySelectorAll("library_nodes node"),i=0;i<t.length;i++){var r=t[i].attributes.getNamedItem("id");if(r&&r.value===e)return t[i]}}function b(e){var t=[],i=1e6,r=-1e6;for(var a in We)for(var n=We[a],s=0;s<n.channel.length;s++){var o=n.channel[s],h=n.sampler[s],a=o.target.split("/")[0];a==e.id&&(h.create(),o.sampler=h,i=Math.min(i,h.startTime),r=Math.max(r,h.endTime),t.push(o))}return t.length&&(e.startTime=i,e.endTime=r),t}function w(e){if(e.channels&&e.channels.length){for(var t=[],i=[],r=0,a=e.channels.length;a>r;r++){var n,s=e.channels[r],o=s.fullSid,h=s.sampler,c=h.input,l=e.getTransformBySid(s.sid);if(s.arrIndices){n=[];for(var u=0,d=s.arrIndices.length;d>u;u++)n[u]=Re(s.arrIndices[u])}else n=Ne(s.member);if(l){-1===i.indexOf(o)&&i.push(o);for(var u=0,d=c.length;d>u;u++){var p=c[u],m=h.getData(l.type,u,n),f=E(t,p);if(!f){f=new ie(p);var g=T(t,p);t.splice(-1===g?t.length:g,0,f)}f.addTarget(o,l,n,m)}}else console.log('Could not find transform "'+s.sid+'" in node '+e.id)}for(var r=0;r<i.length;r++)for(var v=i[r],u=0;u<t.length;u++){var f=t[u];f.hasTarget(v)||x(t,f,u,v)}e.keys=t,e.sids=i}}function E(e,t){for(var i=null,r=0,a=e.length;a>r&&null===i;r++){var n=e[r];if(n.time===t)i=n;else if(n.time>t)break}return i}function T(e,t){for(var i=-1,r=0,a=e.length;a>r&&-1===i;r++){var n=e[r];n.time>=t&&(i=r)}return i}function x(e,t,i,r){var a=R(e,r,i?i-1:0),n=k(e,r,i+1);if(a&&n){var s,o=(t.time-a.time)/(n.time-a.time),h=a.getTarget(r),c=n.getTarget(r).data,l=h.data;if("matrix"===h.type)s=l;else if(l.length){s=[];for(var u=0;u<l.length;++u)s[u]=l[u]+(c[u]-l[u])*o}else s=l+(c-l)*o;t.addTarget(r,h.transform,h.member,s)}}function k(e,t,i){for(;i<e.length;i++){var r=e[i];if(r.hasTarget(t))return r}return null}function R(e,t,i){for(i=i>=0?i:i+e.length;i>=0;i--){var r=e[i];if(r.hasTarget(t))return r}return null}function N(){this.id="",this.init_from=""}function A(){this.id="",this.name="",this.type="",this.skin=null,this.morph=null}function H(){this.method=null,this.source=null,this.targets=null,this.weights=null}function C(){this.source="",this.bindShapeMatrix=null,this.invBindMatrices=[],this.joints=[],this.weights=[]}function M(){this.id="",this.name="",this.nodes=[],this.scene=new THREE.Group}function S(){this.id="",this.name="",this.sid="",this.nodes=[],this.controllers=[],this.transforms=[],this.geometries=[],this.channels=[],this.matrix=new THREE.Matrix4}function _(){this.sid="",this.type="",this.data=[],this.obj=null}function O(){this.url="",this.skeleton=[],this.instance_material=[]}function j(){this.symbol="",this.target=""}function L(){this.url="",this.instance_material=[]}function I(){this.id="",this.mesh=null}function P(e){this.geometry=e.id,this.primitives=[],this.vertices=null,this.geometry3js=null}function U(){this.material="",this.count=0,this.inputs=[],this.vcount=null,this.p=[],this.geometry=new THREE.Geometry}function q(){U.call(this),this.vcount=[]}function z(){U.call(this),this.vcount=1}function W(){U.call(this),this.vcount=3}function D(){this.source="",this.count=0,this.stride=0,this.params=[]}function F(){this.input={}}function V(){this.semantic="",this.offset=0,this.source="",this.set=0}function B(e){this.id=e,this.type=null}function X(){this.id="",this.name="",this.instance_effect=null}function G(){this.color=new THREE.Color,this.color.setRGB(Math.random(),Math.random(),Math.random()),this.color.a=1,this.texture=null,this.texcoord=null,this.texOpts=null}function K(e,t){this.type=e,this.effect=t,this.material=null}function Y(e){this.effect=e,this.init_from=null,this.format=null}function Z(e){this.effect=e,this.source=null,this.wrap_s=null,this.wrap_t=null,this.minfilter=null,this.magfilter=null,this.mipfilter=null}function $(){this.id="",this.name="",this.shader=null,this.surface={},this.sampler={}}function J(){this.url=""}function Q(){this.id="",this.name="",this.source={},this.sampler=[],this.channel=[]}function ee(e){this.animation=e,this.source="",this.target="",this.fullSid=null,this.sid=null,this.dotSyntax=null,this.arrSyntax=null,this.arrIndices=null,this.member=null}function te(e){this.id="",this.animation=e,this.inputs=[],this.input=null,this.output=null,this.strideOut=null,this.interpolation=null,this.startTime=null,this.endTime=null,this.duration=0}function ie(e){this.targets=[],this.time=e}function re(){this.id="",this.name="",this.technique=""}function ae(){this.url=""}function ne(){this.id="",this.name="",this.technique=""}function se(){this.url=""}function oe(){this.id="",this.name="",this.joints=[],this.links=[]}function he(){this.sid="",this.name="",this.axis=new THREE.Vector3,this.limits={min:0,max:0},this.type="",this["static"]=!1,this.zeroPosition=0,this.middlePosition=0}function ce(){this.sid="",this.name="",this.transforms=[],this.attachments=[]}function le(){this.joint="",this.transforms=[],this.links=[]}function ue(e){var t=e.getAttribute("id");return void 0!=qe[t]?qe[t]:(qe[t]=new B(t).parse(e),qe[t])}function de(e){for(var t=fe(e),i=[],r=0,a=t.length;a>r;r++)i.push("true"===t[r]||"1"===t[r]);return i}function pe(e){for(var t=fe(e),i=[],r=0,a=t.length;a>r;r++)i.push(parseFloat(t[r]));return i}function me(e){for(var t=fe(e),i=[],r=0,a=t.length;a>r;r++)i.push(parseInt(t[r],10));return i}function fe(e){return e.length>0?ge(e).split(/\s+/):[]}function ge(e){return e.replace(/^\s+/,"").replace(/\s+$/,"")}function ve(e,t,i){return e.hasAttribute(t)?parseInt(e.getAttribute(t),10):i}function ye(e,t){var i=new THREE.ImageLoader;i.load(t,function(t){e.image=t,e.needsUpdate=!0})}function be(e,t){e.doubleSided=!1;var i=t.querySelectorAll("extra double_sided")[0];i&&i&&1===parseInt(i.textContent,10)&&(e.doubleSided=!0)}function we(){if(Ye.convertUpAxis!==!0||$e===Ye.upAxis)Je=null;else switch($e){case"X":Je="Y"===Ye.upAxis?"XtoY":"XtoZ";break;case"Y":Je="X"===Ye.upAxis?"YtoX":"YtoZ";break;case"Z":Je="X"===Ye.upAxis?"ZtoX":"ZtoY"}}function Ee(e,t){if(Ye.convertUpAxis===!0&&$e!==Ye.upAxis)switch(Je){case"XtoY":var i=e[0];e[0]=t*e[1],e[1]=i;break;case"XtoZ":var i=e[2];e[2]=e[1],e[1]=e[0],e[0]=i;break;case"YtoX":var i=e[0];e[0]=e[1],e[1]=t*i;break;case"YtoZ":var i=e[1];e[1]=t*e[2],e[2]=i;break;case"ZtoX":var i=e[0];e[0]=e[1],e[1]=e[2],e[2]=i;break;case"ZtoY":var i=e[1];e[1]=e[2],e[2]=t*i}}function Te(e,t){if(Ye.convertUpAxis!==!0||$e===Ye.upAxis)return t;switch(e){case"X":t="XtoY"===Je?-1*t:t;break;case"Y":t="YtoZ"===Je||"YtoX"===Je?-1*t:t;break;case"Z":t="ZtoY"===Je?-1*t:t}return t}function xe(e,t){var i=[e[t],e[t+1],e[t+2]];return Ee(i,-1),new THREE.Vector3(i[0],i[1],i[2])}function ke(e){if(Ye.convertUpAxis){var t=[e[0],e[4],e[8]];Ee(t,-1),e[0]=t[0],e[4]=t[1],e[8]=t[2],t=[e[1],e[5],e[9]],Ee(t,-1),e[1]=t[0],e[5]=t[1],e[9]=t[2],t=[e[2],e[6],e[10]],Ee(t,-1),e[2]=t[0],e[6]=t[1],e[10]=t[2],t=[e[0],e[1],e[2]],Ee(t,-1),e[0]=t[0],e[1]=t[1],e[2]=t[2],t=[e[4],e[5],e[6]],Ee(t,-1),e[4]=t[0],e[5]=t[1],e[6]=t[2],t=[e[8],e[9],e[10]],Ee(t,-1),e[8]=t[0],e[9]=t[1],e[10]=t[2],t=[e[3],e[7],e[11]],Ee(t,-1),e[3]=t[0],e[7]=t[1],e[11]=t[2]}return(new THREE.Matrix4).set(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8],e[9],e[10],e[11],e[12],e[13],e[14],e[15])}function Re(e){if(e>-1&&3>e){var t=["X","Y","Z"],i={X:0,Y:1,Z:2};e=Ne(t[e]),e=i[e]}return e}function Ne(e){if(Ye.convertUpAxis)switch(e){case"X":switch(Je){case"XtoY":case"XtoZ":case"YtoX":e="Y";break;case"ZtoX":e="Z"}break;case"Y":switch(Je){case"XtoY":case"YtoX":case"ZtoX":e="X";break;case"XtoZ":case"YtoZ":case"ZtoY":e="Z"}break;case"Z":switch(Je){case"XtoZ":e="X";break;case"YtoZ":case"ZtoX":case"ZtoY":e="Y"}}return e}var Ae,He,Ce,Me,Se,_e,Oe,je,Le,Ie=null,Pe=null,Ue=null,qe={},ze={},We={},De={},Fe={},Ve={},Be={},Xe={},Ge={},Ke=THREE.SmoothShading,Ye={centerGeometry:!1,convertUpAxis:!1,subdivideFaces:!0,upAxis:"Y",defaultEnvMap:null},Ze=1,$e="Y",Je=null;return N.prototype.parse=function(e){this.id=e.getAttribute("id");for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];"init_from"===i.nodeName&&(this.init_from=i.textContent);
}return this},A.prototype.parse=function(e){this.id=e.getAttribute("id"),this.name=e.getAttribute("name"),this.type="none";for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];switch(i.nodeName){case"skin":this.skin=(new C).parse(i),this.type=i.nodeName;break;case"morph":this.morph=(new H).parse(i),this.type=i.nodeName}}return this},H.prototype.parse=function(e){var t,i={},r=[];for(this.method=e.getAttribute("method"),this.source=e.getAttribute("source").replace(/^#/,""),t=0;t<e.childNodes.length;t++){var a=e.childNodes[t];if(1==a.nodeType)switch(a.nodeName){case"source":var n=(new B).parse(a);i[n.id]=n;break;case"targets":r=this.parseInputs(a);break;default:console.log(a.nodeName)}}for(t=0;t<r.length;t++){var s=r[t],n=i[s.source];switch(s.semantic){case"MORPH_TARGET":this.targets=n.read();break;case"MORPH_WEIGHT":this.weights=n.read()}}return this},H.prototype.parseInputs=function(e){for(var t=[],i=0;i<e.childNodes.length;i++){var r=e.childNodes[i];if(1==r.nodeType)switch(r.nodeName){case"input":t.push((new V).parse(r))}}return t},C.prototype.parse=function(e){var t,i,r={};this.source=e.getAttribute("source").replace(/^#/,""),this.invBindMatrices=[],this.joints=[],this.weights=[];for(var a=0;a<e.childNodes.length;a++){var n=e.childNodes[a];if(1==n.nodeType)switch(n.nodeName){case"bind_shape_matrix":var s=pe(n.textContent);this.bindShapeMatrix=ke(s);break;case"source":var o=(new B).parse(n);r[o.id]=o;break;case"joints":t=n;break;case"vertex_weights":i=n;break;default:console.log(n.nodeName)}}return this.parseJoints(t,r),this.parseWeights(i,r),this},C.prototype.parseJoints=function(e,t){for(var i=0;i<e.childNodes.length;i++){var r=e.childNodes[i];if(1==r.nodeType)switch(r.nodeName){case"input":var a=(new V).parse(r),n=t[a.source];"JOINT"===a.semantic?this.joints=n.read():"INV_BIND_MATRIX"===a.semantic&&(this.invBindMatrices=n.read())}}},C.prototype.parseWeights=function(e,t){for(var i,r,a=[],n=0;n<e.childNodes.length;n++){var s=e.childNodes[n];if(1==s.nodeType)switch(s.nodeName){case"input":a.push((new V).parse(s));break;case"v":i=me(s.textContent);break;case"vcount":r=me(s.textContent)}}for(var o=0,n=0;n<r.length;n++){for(var h=r[n],c=[],l=0;h>l;l++){for(var u={},d=0;d<a.length;d++){var p=a[d],m=i[o+p.offset];switch(p.semantic){case"JOINT":u.joint=m;break;case"WEIGHT":u.weight=t[p.source].data[m]}}c.push(u),o+=a.length}for(var l=0;l<c.length;l++)c[l].index=n;this.weights.push(c)}},M.prototype.getChildById=function(e,t){for(var i=0;i<this.nodes.length;i++){var r=this.nodes[i].getChildById(e,t);if(r)return r}return null},M.prototype.getChildBySid=function(e,t){for(var i=0;i<this.nodes.length;i++){var r=this.nodes[i].getChildBySid(e,t);if(r)return r}return null},M.prototype.parse=function(e){this.id=e.getAttribute("id"),this.name=e.getAttribute("name"),this.nodes=[];for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"node":this.nodes.push((new S).parse(i))}}return this},S.prototype.getChannelForTransform=function(e){for(var t=0;t<this.channels.length;t++){var i,r,a=this.channels[t],n=a.target.split("/"),s=(n.shift(),n.shift()),o=s.indexOf(".")>=0,h=s.indexOf("(")>=0;if(o)n=s.split("."),s=n.shift(),r=n.shift();else if(h){i=s.split("("),s=i.shift();for(var c=0;c<i.length;c++)i[c]=parseInt(i[c].replace(/\)/,""))}if(s===e)return a.info={sid:s,dotSyntax:o,arrSyntax:h,arrIndices:i},a}return null},S.prototype.getChildById=function(e,t){if(this.id===e)return this;if(t)for(var i=0;i<this.nodes.length;i++){var r=this.nodes[i].getChildById(e,t);if(r)return r}return null},S.prototype.getChildBySid=function(e,t){if(this.sid===e)return this;if(t)for(var i=0;i<this.nodes.length;i++){var r=this.nodes[i].getChildBySid(e,t);if(r)return r}return null},S.prototype.getTransformBySid=function(e){for(var t=0;t<this.transforms.length;t++)if(this.transforms[t].sid===e)return this.transforms[t];return null},S.prototype.parse=function(e){var t;this.id=e.getAttribute("id"),this.sid=e.getAttribute("sid"),this.name=e.getAttribute("name"),this.type=e.getAttribute("type"),this.layer=e.getAttribute("layer"),this.type="JOINT"===this.type?this.type:"NODE",this.nodes=[],this.transforms=[],this.geometries=[],this.cameras=[],this.lights=[],this.controllers=[],this.matrix=new THREE.Matrix4;for(var i=0;i<e.childNodes.length;i++){var r=e.childNodes[i];if(1==r.nodeType)switch(r.nodeName){case"node":this.nodes.push((new S).parse(r));break;case"instance_camera":this.cameras.push((new ae).parse(r));break;case"instance_controller":this.controllers.push((new O).parse(r));break;case"instance_geometry":this.geometries.push((new L).parse(r));break;case"instance_light":this.lights.push((new se).parse(r));break;case"instance_node":t=r.getAttribute("url").replace(/^#/,"");var a=y(t);a&&this.nodes.push((new S).parse(a));break;case"rotate":case"translate":case"scale":case"matrix":case"lookat":case"skew":this.transforms.push((new _).parse(r));break;case"extra":break;default:console.log(r.nodeName)}}return this.channels=b(this),w(this),this.updateMatrix(),this},S.prototype.updateMatrix=function(){this.matrix.identity();for(var e=0;e<this.transforms.length;e++)this.transforms[e].apply(this.matrix)},_.prototype.parse=function(e){return this.sid=e.getAttribute("sid"),this.type=e.nodeName,this.data=pe(e.textContent),this.convert(),this},_.prototype.convert=function(){switch(this.type){case"matrix":this.obj=ke(this.data);break;case"rotate":this.angle=THREE.Math.degToRad(this.data[3]);case"translate":Ee(this.data,-1),this.obj=new THREE.Vector3(this.data[0],this.data[1],this.data[2]);break;case"scale":Ee(this.data,1),this.obj=new THREE.Vector3(this.data[0],this.data[1],this.data[2]);break;default:console.log("Can not convert Transform of type "+this.type)}},_.prototype.apply=function(){var e=new THREE.Matrix4;return function(t){switch(this.type){case"matrix":t.multiply(this.obj);break;case"translate":t.multiply(e.makeTranslation(this.obj.x,this.obj.y,this.obj.z));break;case"rotate":t.multiply(e.makeRotationAxis(this.obj,this.angle));break;case"scale":t.scale(this.obj)}}}(),_.prototype.update=function(e,t){var i=["X","Y","Z","ANGLE"];switch(this.type){case"matrix":if(t)if(1===t.length)switch(t[0]){case 0:this.obj.n11=e[0],this.obj.n21=e[1],this.obj.n31=e[2],this.obj.n41=e[3];break;case 1:this.obj.n12=e[0],this.obj.n22=e[1],this.obj.n32=e[2],this.obj.n42=e[3];break;case 2:this.obj.n13=e[0],this.obj.n23=e[1],this.obj.n33=e[2],this.obj.n43=e[3];break;case 3:this.obj.n14=e[0],this.obj.n24=e[1],this.obj.n34=e[2],this.obj.n44=e[3]}else if(2===t.length){var r="n"+(t[0]+1)+(t[1]+1);this.obj[r]=e}else console.log("Incorrect addressing of matrix in transform.");else this.obj.copy(e);break;case"translate":case"scale":switch("[object Array]"===Object.prototype.toString.call(t)&&(t=i[t[0]]),t){case"X":this.obj.x=e;break;case"Y":this.obj.y=e;break;case"Z":this.obj.z=e;break;default:this.obj.x=e[0],this.obj.y=e[1],this.obj.z=e[2]}break;case"rotate":switch("[object Array]"===Object.prototype.toString.call(t)&&(t=i[t[0]]),t){case"X":this.obj.x=e;break;case"Y":this.obj.y=e;break;case"Z":this.obj.z=e;break;case"ANGLE":this.angle=THREE.Math.degToRad(e);break;default:this.obj.x=e[0],this.obj.y=e[1],this.obj.z=e[2],this.angle=THREE.Math.degToRad(e[3])}}},O.prototype.parse=function(e){this.url=e.getAttribute("url").replace(/^#/,""),this.skeleton=[],this.instance_material=[];for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1===i.nodeType)switch(i.nodeName){case"skeleton":this.skeleton.push(i.textContent.replace(/^#/,""));break;case"bind_material":for(var r=i.querySelectorAll("instance_material"),a=0;a<r.length;a++){var n=r[a];this.instance_material.push((new j).parse(n))}break;case"extra":}}return this},j.prototype.parse=function(e){return this.symbol=e.getAttribute("symbol"),this.target=e.getAttribute("target").replace(/^#/,""),this},L.prototype.parse=function(e){this.url=e.getAttribute("url").replace(/^#/,""),this.instance_material=[];for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType&&"bind_material"===i.nodeName){for(var r=i.querySelectorAll("instance_material"),a=0;a<r.length;a++){var n=r[a];this.instance_material.push((new j).parse(n))}break}}return this},I.prototype.parse=function(e){this.id=e.getAttribute("id"),be(this,e);for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];switch(i.nodeName){case"mesh":this.mesh=new P(this).parse(i);break;case"extra":}}return this},P.prototype.parse=function(e){this.primitives=[];for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];switch(i.nodeName){case"source":ue(i);break;case"vertices":this.vertices=(new F).parse(i);break;case"linestrips":this.primitives.push((new z).parse(i));break;case"triangles":this.primitives.push((new W).parse(i));break;case"polygons":this.primitives.push((new U).parse(i));break;case"polylist":this.primitives.push((new q).parse(i))}}if(this.geometry3js=new THREE.Geometry,null===this.vertices)return this;for(var r=qe[this.vertices.input.POSITION.source].data,t=0;t<r.length;t+=3)this.geometry3js.vertices.push(xe(r,t).clone());for(var t=0;t<this.primitives.length;t++){var a=this.primitives[t];a.setVertices(this.vertices),this.handlePrimitive(a,this.geometry3js)}return this.geometry3js.calcNormals&&(this.geometry3js.computeVertexNormals(),delete this.geometry3js.calcNormals),this},P.prototype.handlePrimitive=function(e,t){if(e instanceof z)return void(t.isLineStrip=!0);var i,r,a,n,s,o,h,c=e.p,l=e.inputs,u=0,d=3,p=0,m=[];for(i=0;i<l.length;i++){a=l[i];var f=a.offset+1;switch(p=f>p?f:p,a.semantic){case"TEXCOORD":m.push(a.set)}}for(var g=0;g<c.length;++g)for(var v=c[g],y=0;y<v.length;){var b=[],w=[],E=null,T=[];for(d=e.vcount?e.vcount.length?e.vcount[u++]:e.vcount:v.length/p,i=0;d>i;i++)for(r=0;r<l.length;r++)switch(a=l[r],o=qe[a.source],n=v[y+i*p+a.offset],h=o.accessor.params.length,s=n*h,a.semantic){case"VERTEX":b.push(n);break;case"NORMAL":w.push(xe(o.data,s));break;case"TEXCOORD":E=E||{},void 0===E[a.set]&&(E[a.set]=[]),E[a.set].push(new THREE.Vector2(o.data[s],o.data[s+1]));break;case"COLOR":T.push((new THREE.Color).setRGB(o.data[s],o.data[s+1],o.data[s+2]))}if(0===w.length)if(a=this.vertices.input.NORMAL){o=qe[a.source],h=o.accessor.params.length;for(var x=0,k=b.length;k>x;x++)w.push(xe(o.data,b[x]*h))}else t.calcNormals=!0;if(!E&&(E={},a=this.vertices.input.TEXCOORD)){m.push(a.set),o=qe[a.source],h=o.accessor.params.length;for(var x=0,k=b.length;k>x;x++)s=b[x]*h,void 0===E[a.set]&&(E[a.set]=[]),E[a.set].push(new THREE.Vector2(o.data[s],1-o.data[s+1]))}if(0===T.length&&(a=this.vertices.input.COLOR)){o=qe[a.source],h=o.accessor.params.length;for(var x=0,k=b.length;k>x;x++)s=b[x]*h,T.push((new THREE.Color).setRGB(o.data[s],o.data[s+1],o.data[s+2]))}var R,N,A=null,H=[];if(3===d)H.push(new THREE.Face3(b[0],b[1],b[2],w,T.length?T:new THREE.Color));else if(4===d)H.push(new THREE.Face3(b[0],b[1],b[3],w.length?[w[0].clone(),w[1].clone(),w[3].clone()]:[],T.length?[T[0],T[1],T[3]]:new THREE.Color)),H.push(new THREE.Face3(b[1],b[2],b[3],w.length?[w[1].clone(),w[2].clone(),w[3].clone()]:[],T.length?[T[1],T[2],T[3]]:new THREE.Color));else if(d>4&&Ye.subdivideFaces){var C=T.length?T:new THREE.Color;for(r=1;d-1>r;)H.push(new THREE.Face3(b[0],b[r],b[r+1],w.length?[w[0].clone(),w[r++].clone(),w[r].clone()]:[],C))}if(H.length)for(var x=0,k=H.length;k>x;x++)for(A=H[x],A.daeMaterial=e.material,t.faces.push(A),r=0;r<m.length;r++)R=E[m[r]],N=d>4?[R[0],R[x+1],R[x+2]]:4===d?0===x?[R[0],R[1],R[3]]:[R[1].clone(),R[2],R[3].clone()]:[R[0],R[1],R[2]],void 0===t.faceVertexUvs[r]&&(t.faceVertexUvs[r]=[]),t.faceVertexUvs[r].push(N);else console.log("dropped face with vcount "+d+" for geometry with id: "+t.id);y+=p*d}},U.prototype.setVertices=function(e){for(var t=0;t<this.inputs.length;t++)this.inputs[t].source===e.id&&(this.inputs[t].source=e.input.POSITION.source)},U.prototype.parse=function(e){this.material=e.getAttribute("material"),this.count=ve(e,"count",0);for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];switch(i.nodeName){case"input":this.inputs.push((new V).parse(e.childNodes[t]));break;case"vcount":this.vcount=me(i.textContent);break;case"p":this.p.push(me(i.textContent));break;case"ph":console.warn("polygon holes not yet supported!")}}return this},q.prototype=Object.create(U.prototype),q.prototype.constructor=q,z.prototype=Object.create(U.prototype),z.prototype.constructor=z,W.prototype=Object.create(U.prototype),W.prototype.constructor=W,D.prototype.parse=function(e){this.params=[],this.source=e.getAttribute("source"),this.count=ve(e,"count",0),this.stride=ve(e,"stride",0);for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if("param"===i.nodeName){var r={};r.name=i.getAttribute("name"),r.type=i.getAttribute("type"),this.params.push(r)}}return this},F.prototype.parse=function(e){this.id=e.getAttribute("id");for(var t=0;t<e.childNodes.length;t++)if("input"===e.childNodes[t].nodeName){var i=(new V).parse(e.childNodes[t]);this.input[i.semantic]=i}return this},V.prototype.parse=function(e){return this.semantic=e.getAttribute("semantic"),this.source=e.getAttribute("source").replace(/^#/,""),this.set=ve(e,"set",-1),this.offset=ve(e,"offset",0),"TEXCOORD"===this.semantic&&this.set<0&&(this.set=0),this},B.prototype.parse=function(e){this.id=e.getAttribute("id");for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];switch(i.nodeName){case"bool_array":this.data=de(i.textContent),this.type=i.nodeName;break;case"float_array":this.data=pe(i.textContent),this.type=i.nodeName;break;case"int_array":this.data=me(i.textContent),this.type=i.nodeName;break;case"IDREF_array":case"Name_array":this.data=fe(i.textContent),this.type=i.nodeName;break;case"technique_common":for(var r=0;r<i.childNodes.length;r++)if("accessor"===i.childNodes[r].nodeName){this.accessor=(new D).parse(i.childNodes[r]);break}}}return this},B.prototype.read=function(){var e=[],t=this.accessor.params[0];switch(t.type){case"IDREF":case"Name":case"name":case"float":return this.data;case"float4x4":for(var i=0;i<this.data.length;i+=16){var r=this.data.slice(i,i+16),a=ke(r);e.push(a)}break;default:console.log("ColladaLoader: Source: Read dont know how to read "+t.type+".")}return e},X.prototype.parse=function(e){this.id=e.getAttribute("id"),this.name=e.getAttribute("name");for(var t=0;t<e.childNodes.length;t++)if("instance_effect"===e.childNodes[t].nodeName){this.instance_effect=(new J).parse(e.childNodes[t]);break}return this},G.prototype.isColor=function(){return null===this.texture},G.prototype.isTexture=function(){return null!=this.texture},G.prototype.parse=function(e){"transparent"===e.nodeName&&(this.opaque=e.getAttribute("opaque"));for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"color":var r=pe(i.textContent);this.color=new THREE.Color,this.color.setRGB(r[0],r[1],r[2]),this.color.a=r[3];break;case"texture":this.texture=i.getAttribute("texture"),this.texcoord=i.getAttribute("texcoord"),this.texOpts={offsetU:0,offsetV:0,repeatU:1,repeatV:1,wrapU:1,wrapV:1},this.parseTexture(i)}}return this},G.prototype.parseTexture=function(e){if(!e.childNodes)return this;e.childNodes[1]&&"extra"===e.childNodes[1].nodeName&&(e=e.childNodes[1],e.childNodes[1]&&"technique"===e.childNodes[1].nodeName&&(e=e.childNodes[1]));for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];switch(i.nodeName){case"offsetU":case"offsetV":case"repeatU":case"repeatV":this.texOpts[i.nodeName]=parseFloat(i.textContent);break;case"wrapU":case"wrapV":"TRUE"===i.textContent.toUpperCase()?this.texOpts[i.nodeName]=1:this.texOpts[i.nodeName]=parseInt(i.textContent);break;default:this.texOpts[i.nodeName]=i.textContent}}return this},K.prototype.parse=function(e){for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"emission":case"diffuse":case"specular":case"transparent":this[i.nodeName]=(new G).parse(i);break;case"bump":var r=i.getAttribute("bumptype");r?"heightfield"===r.toLowerCase()?this.bump=(new G).parse(i):"normalmap"===r.toLowerCase()?this.normal=(new G).parse(i):(console.error("Shader.prototype.parse: Invalid value for attribute 'bumptype' ("+r+") - valid bumptypes are 'HEIGHTFIELD' and 'NORMALMAP' - defaulting to 'HEIGHTFIELD'"),this.bump=(new G).parse(i)):(console.warn("Shader.prototype.parse: Attribute 'bumptype' missing from bump node - defaulting to 'HEIGHTFIELD'"),this.bump=(new G).parse(i));break;case"shininess":case"reflectivity":case"index_of_refraction":case"transparency":var a=i.querySelectorAll("float");a.length>0&&(this[i.nodeName]=parseFloat(a[0].textContent))}}return this.create(),this},K.prototype.create=function(){var e={},t=!1;if(void 0!==this.transparency&&void 0!==this.transparent){var i=(this.transparent,(this.transparent.color.r+this.transparent.color.g+this.transparent.color.b)/3*this.transparency);i>0&&(t=!0,e.transparent=!0,e.opacity=1-i)}var r={diffuse:"map",ambient:"lightMap",specular:"specularMap",emission:"emissionMap",bump:"bumpMap",normal:"normalMap"};for(var a in this)switch(a){case"ambient":case"emission":case"diffuse":case"specular":case"bump":case"normal":var n=this[a];if(n instanceof G)if(n.isTexture()){var s=n.texture,o=this.effect.sampler[s];if(void 0!==o&&void 0!==o.source){var h=this.effect.surface[o.source];if(void 0!==h){var c=ze[h.init_from];if(c){var l,u=Oe+c.init_from,d=THREE.Loader.Handlers.get(u);null!==d?l=d.load(u):(l=new THREE.Texture,ye(l,u)),l.wrapS=n.texOpts.wrapU?THREE.RepeatWrapping:THREE.ClampToEdgeWrapping,l.wrapT=n.texOpts.wrapV?THREE.RepeatWrapping:THREE.ClampToEdgeWrapping,l.offset.x=n.texOpts.offsetU,l.offset.y=n.texOpts.offsetV,l.repeat.x=n.texOpts.repeatU,l.repeat.y=n.texOpts.repeatV,e[r[a]]=l,"emission"===a&&(e.emissive=16777215)}}}}else"diffuse"!==a&&t||("emission"===a?e.emissive=n.color.getHex():e[a]=n.color.getHex());break;case"shininess":e[a]=this[a];break;case"reflectivity":e[a]=this[a],e[a]>0&&(e.envMap=Ye.defaultEnvMap),e.combine=THREE.MixOperation;break;case"index_of_refraction":e.refractionRatio=this[a],1!==this[a]&&(e.envMap=Ye.defaultEnvMap);break;case"transparency":}switch(e.shading=Ke,e.side=this.effect.doubleSided?THREE.DoubleSide:THREE.FrontSide,void 0!==e.diffuse&&(e.color=e.diffuse,delete e.diffuse),this.type){case"constant":void 0!=e.emissive&&(e.color=e.emissive),this.material=new THREE.MeshBasicMaterial(e);break;case"phong":case"blinn":this.material=new THREE.MeshPhongMaterial(e);break;case"lambert":default:this.material=new THREE.MeshLambertMaterial(e)}return this.material},Y.prototype.parse=function(e){for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"init_from":this.init_from=i.textContent;break;case"format":this.format=i.textContent;break;default:console.log("unhandled Surface prop: "+i.nodeName)}}return this},Z.prototype.parse=function(e){for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"source":this.source=i.textContent;break;case"minfilter":this.minfilter=i.textContent;break;case"magfilter":this.magfilter=i.textContent;break;case"mipfilter":this.mipfilter=i.textContent;break;case"wrap_s":this.wrap_s=i.textContent;break;case"wrap_t":this.wrap_t=i.textContent;break;default:console.log("unhandled Sampler2D prop: "+i.nodeName)}}return this},$.prototype.create=function(){return null===this.shader?null:void 0},$.prototype.parse=function(e){this.id=e.getAttribute("id"),this.name=e.getAttribute("name"),be(this,e),this.shader=null;for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"profile_COMMON":this.parseTechnique(this.parseProfileCOMMON(i))}}return this},$.prototype.parseNewparam=function(e){for(var t=e.getAttribute("sid"),i=0;i<e.childNodes.length;i++){var r=e.childNodes[i];if(1==r.nodeType)switch(r.nodeName){case"surface":this.surface[t]=new Y(this).parse(r);break;case"sampler2D":this.sampler[t]=new Z(this).parse(r);break;case"extra":break;default:console.log(r.nodeName)}}},$.prototype.parseProfileCOMMON=function(e){for(var t,i=0;i<e.childNodes.length;i++){var r=e.childNodes[i];if(1==r.nodeType)switch(r.nodeName){case"profile_COMMON":this.parseProfileCOMMON(r);break;case"technique":t=r;break;case"newparam":this.parseNewparam(r);break;case"image":var a=(new N).parse(r);ze[a.id]=a;break;case"extra":break;default:console.log(r.nodeName)}}return t},$.prototype.parseTechnique=function(e){for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"constant":case"lambert":case"blinn":case"phong":this.shader=new K(i.nodeName,this).parse(i);break;case"extra":this.parseExtra(i)}}},$.prototype.parseExtra=function(e){for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"technique":this.parseExtraTechnique(i)}}},$.prototype.parseExtraTechnique=function(e){for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"bump":this.shader.parse(e)}}},J.prototype.parse=function(e){return this.url=e.getAttribute("url").replace(/^#/,""),this},Q.prototype.parse=function(e){this.id=e.getAttribute("id"),this.name=e.getAttribute("name"),this.source={};for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"animation":var r=(new Q).parse(i);for(var a in r.source)this.source[a]=r.source[a];for(var n=0;n<r.channel.length;n++)this.channel.push(r.channel[n]),this.sampler.push(r.sampler[n]);break;case"source":var a=(new B).parse(i);this.source[a.id]=a;break;case"sampler":this.sampler.push(new te(this).parse(i));break;case"channel":this.channel.push(new ee(this).parse(i))}}return this},ee.prototype.parse=function(e){this.source=e.getAttribute("source").replace(/^#/,""),this.target=e.getAttribute("target");var t=this.target.split("/"),i=(t.shift(),t.shift()),r=i.indexOf(".")>=0,a=i.indexOf("(")>=0;if(r)t=i.split("."),this.sid=t.shift(),this.member=t.shift();else if(a){var n=i.split("(");this.sid=n.shift();for(var s=0;s<n.length;s++)n[s]=parseInt(n[s].replace(/\)/,""));this.arrIndices=n}else this.sid=i;return this.fullSid=i,this.dotSyntax=r,this.arrSyntax=a,this},te.prototype.parse=function(e){this.id=e.getAttribute("id"),this.inputs=[];for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"input":this.inputs.push((new V).parse(i))}}return this},te.prototype.create=function(){for(var e=0;e<this.inputs.length;e++){var t=this.inputs[e],i=this.animation.source[t.source];switch(t.semantic){case"INPUT":this.input=i.read();break;case"OUTPUT":this.output=i.read(),this.strideOut=i.accessor.stride;break;case"INTERPOLATION":this.interpolation=i.read();break;case"IN_TANGENT":break;case"OUT_TANGENT":break;default:console.log(t.semantic)}}if(this.startTime=0,this.endTime=0,this.duration=0,this.input.length){this.startTime=1e8,this.endTime=-1e8;for(var e=0;e<this.input.length;e++)this.startTime=Math.min(this.startTime,this.input[e]),this.endTime=Math.max(this.endTime,this.input[e]);this.duration=this.endTime-this.startTime}},te.prototype.getData=function(e,t,i){var r;if("matrix"===e&&16===this.strideOut)r=this.output[t];else if(this.strideOut>1){r=[],t*=this.strideOut;for(var a=0;a<this.strideOut;++a)r[a]=this.output[t+a];if(3===this.strideOut)switch(e){case"rotate":case"translate":Ee(r,-1);break;case"scale":Ee(r,1)}else 4===this.strideOut&&"matrix"===e&&Ee(r,-1)}else r=this.output[t],i&&"translate"===e&&(r=Te(i,r));return r},ie.prototype.addTarget=function(e,t,i,r){this.targets.push({sid:e,member:i,transform:t,data:r})},ie.prototype.apply=function(e){for(var t=0;t<this.targets.length;++t){var i=this.targets[t];e&&i.sid!==e||i.transform.update(i.data,i.member)}},ie.prototype.getTarget=function(e){for(var t=0;t<this.targets.length;++t)if(this.targets[t].sid===e)return this.targets[t];return null},ie.prototype.hasTarget=function(e){for(var t=0;t<this.targets.length;++t)if(this.targets[t].sid===e)return!0;return!1},ie.prototype.interpolate=function(e,t){for(var i=0,r=this.targets.length;r>i;i++){var a,n=this.targets[i],s=e.getTarget(n.sid);if("matrix"!==n.transform.type&&s){var o=(t-this.time)/(e.time-this.time),h=s.data,c=n.data;if(0>o&&(o=0),o>1&&(o=1),c.length){a=[];for(var l=0;l<c.length;++l)a[l]=c[l]+(h[l]-c[l])*o}else a=c+(h-c)*o}else a=n.data;n.transform.update(a,n.member)}},re.prototype.parse=function(e){this.id=e.getAttribute("id"),this.name=e.getAttribute("name");for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"optics":this.parseOptics(i)}}return this},re.prototype.parseOptics=function(e){for(var t=0;t<e.childNodes.length;t++)if("technique_common"===e.childNodes[t].nodeName)for(var i=e.childNodes[t],r=0;r<i.childNodes.length;r++)if(this.technique=i.childNodes[r].nodeName,"perspective"===this.technique)for(var a=i.childNodes[r],n=0;n<a.childNodes.length;n++){var s=a.childNodes[n];switch(s.nodeName){case"yfov":this.yfov=s.textContent;break;case"xfov":this.xfov=s.textContent;break;case"znear":this.znear=s.textContent;break;case"zfar":this.zfar=s.textContent;break;case"aspect_ratio":this.aspect_ratio=s.textContent}}else if("orthographic"===this.technique)for(var o=i.childNodes[r],n=0;n<o.childNodes.length;n++){var s=o.childNodes[n];switch(s.nodeName){case"xmag":this.xmag=s.textContent;break;case"ymag":this.ymag=s.textContent;break;case"znear":this.znear=s.textContent;break;case"zfar":this.zfar=s.textContent;break;case"aspect_ratio":this.aspect_ratio=s.textContent}}return this},ae.prototype.parse=function(e){return this.url=e.getAttribute("url").replace(/^#/,""),this},ne.prototype.parse=function(e){this.id=e.getAttribute("id"),this.name=e.getAttribute("name");for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"technique_common":this.parseCommon(i);break;case"technique":this.parseTechnique(i)}}return this},ne.prototype.parseCommon=function(e){for(var t=0;t<e.childNodes.length;t++)switch(e.childNodes[t].nodeName){case"directional":case"point":case"spot":case"ambient":this.technique=e.childNodes[t].nodeName;for(var i=e.childNodes[t],r=0;r<i.childNodes.length;r++){var a=i.childNodes[r];switch(a.nodeName){case"color":var n=pe(a.textContent);this.color=new THREE.Color(0),this.color.setRGB(n[0],n[1],n[2]),this.color.a=n[3];break;case"falloff_angle":this.falloff_angle=parseFloat(a.textContent);break;case"quadratic_attenuation":var s=parseFloat(a.textContent);this.distance=s?Math.sqrt(1/s):0}}}return this},ne.prototype.parseTechnique=function(e){this.profile=e.getAttribute("profile");for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];switch(i.nodeName){case"intensity":this.intensity=parseFloat(i.textContent)}}return this},se.prototype.parse=function(e){return this.url=e.getAttribute("url").replace(/^#/,""),this},oe.prototype.parse=function(e){this.id=e.getAttribute("id"),this.name=e.getAttribute("name"),this.joints=[],this.links=[];for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"technique_common":this.parseCommon(i)}}return this},oe.prototype.parseCommon=function(e){for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(e.childNodes[t].nodeName){case"joint":this.joints.push((new he).parse(i));break;case"link":this.links.push((new ce).parse(i))}}return this},he.prototype.parse=function(e){this.sid=e.getAttribute("sid"),this.name=e.getAttribute("name"),this.axis=new THREE.Vector3,this.limits={min:0,max:0},this.type="",this["static"]=!1,this.zeroPosition=0,this.middlePosition=0;var t=e.querySelector("axis"),i=pe(t.textContent);this.axis=xe(i,0);var r=e.querySelector("limits min")?parseFloat(e.querySelector("limits min").textContent):-360,a=e.querySelector("limits max")?parseFloat(e.querySelector("limits max").textContent):360;this.limits={min:r,max:a};for(var n=["prismatic","revolute"],s=0;s<n.length;s++){var o=n[s],h=e.querySelector(o);h&&(this.type=o)}return this.limits.min>=this.limits.max&&(this["static"]=!0),this.middlePosition=(this.limits.min+this.limits.max)/2,this},ce.prototype.parse=function(e){this.sid=e.getAttribute("sid"),this.name=e.getAttribute("name"),this.transforms=[],this.attachments=[];for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"attachment_full":this.attachments.push((new le).parse(i));break;case"rotate":case"translate":case"matrix":this.transforms.push((new _).parse(i))}}return this},le.prototype.parse=function(e){this.joint=e.getAttribute("joint").split("/").pop(),this.links=[];for(var t=0;t<e.childNodes.length;t++){var i=e.childNodes[t];if(1==i.nodeType)switch(i.nodeName){case"link":this.links.push((new ce).parse(i));break;case"rotate":case"translate":case"matrix":this.transforms.push((new _).parse(i))}}return this},{load:e,parse:t,setPreferredShading:i,applySkin:f,geometries:Fe,options:Ye}},THREE.Animation=function(e,t){this.root=e,this.data=THREE.AnimationHandler.init(t),this.hierarchy=THREE.AnimationHandler.parse(e),this.currentTime=0,this.timeScale=1,this.isPlaying=!1,this.loop=!0,this.weight=0,this.interpolationType=THREE.AnimationHandler.LINEAR},THREE.Animation.prototype={constructor:THREE.Animation,keyTypes:["pos","rot","scl"],play:function(e,t){this.currentTime=void 0!==e?e:0,this.weight=void 0!==t?t:1,this.isPlaying=!0,this.reset(),THREE.AnimationHandler.play(this)},stop:function(){this.isPlaying=!1,THREE.AnimationHandler.stop(this)},reset:function(){for(var e=0,t=this.hierarchy.length;t>e;e++){var i=this.hierarchy[e];void 0===i.animationCache&&(i.animationCache={animations:{},blending:{positionWeight:0,quaternionWeight:0,scaleWeight:0}});var r=this.data.name,a=i.animationCache.animations,n=a[r];void 0===n&&(n={prevKey:{pos:0,rot:0,scl:0},nextKey:{pos:0,rot:0,scl:0},originalMatrix:i.matrix},a[r]=n);for(var s=0;3>s;s++){for(var o=this.keyTypes[s],h=this.data.hierarchy[e].keys[0],c=this.getNextKeyWith(o,e,1);c.time<this.currentTime&&c.index>h.index;)h=c,c=this.getNextKeyWith(o,e,c.index+1);n.prevKey[o]=h,n.nextKey[o]=c}}},resetBlendWeights:function(){for(var e=0,t=this.hierarchy.length;t>e;e++){var i=this.hierarchy[e],r=i.animationCache;if(void 0!==r){var a=r.blending;a.positionWeight=0,a.quaternionWeight=0,a.scaleWeight=0}}},update:function(){var e=[],t=new THREE.Vector3,i=new THREE.Vector3,r=new THREE.Quaternion,a=function(e,t){var i,r,a,s,o,h,c,l,u,d=[],p=[];return i=(e.length-1)*t,r=Math.floor(i),a=i-r,d[0]=0===r?r:r-1,d[1]=r,d[2]=r>e.length-2?r:r+1,d[3]=r>e.length-3?r:r+2,h=e[d[0]],c=e[d[1]],l=e[d[2]],u=e[d[3]],s=a*a,o=a*s,p[0]=n(h[0],c[0],l[0],u[0],a,s,o),p[1]=n(h[1],c[1],l[1],u[1],a,s,o),p[2]=n(h[2],c[2],l[2],u[2],a,s,o),p},n=function(e,t,i,r,a,n,s){var o=.5*(i-e),h=.5*(r-t);return(2*(t-i)+o+h)*s+(-3*(t-i)-2*o-h)*n+o*a+t};return function(n){if(this.isPlaying!==!1&&(this.currentTime+=n*this.timeScale,0!==this.weight)){var s=this.data.length;(this.currentTime>s||this.currentTime<0)&&(this.loop?(this.currentTime%=s,this.currentTime<0&&(this.currentTime+=s),this.reset()):this.stop());for(var o=0,h=this.hierarchy.length;h>o;o++)for(var c=this.hierarchy[o],l=c.animationCache.animations[this.data.name],u=c.animationCache.blending,d=0;3>d;d++){var p=this.keyTypes[d],m=l.prevKey[p],f=l.nextKey[p];if(this.timeScale>0&&f.time<=this.currentTime||this.timeScale<0&&m.time>=this.currentTime){for(m=this.data.hierarchy[o].keys[0],f=this.getNextKeyWith(p,o,1);f.time<this.currentTime&&f.index>m.index;)m=f,f=this.getNextKeyWith(p,o,f.index+1);l.prevKey[p]=m,l.nextKey[p]=f}var g=(this.currentTime-m.time)/(f.time-m.time),v=m[p],y=f[p];if(0>g&&(g=0),g>1&&(g=1),"pos"===p){if(this.interpolationType===THREE.AnimationHandler.LINEAR){i.x=v[0]+(y[0]-v[0])*g,i.y=v[1]+(y[1]-v[1])*g,i.z=v[2]+(y[2]-v[2])*g;var b=this.weight/(this.weight+u.positionWeight);c.position.lerp(i,b),u.positionWeight+=this.weight}else if(this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD){
e[0]=this.getPrevKeyWith("pos",o,m.index-1).pos,e[1]=v,e[2]=y,e[3]=this.getNextKeyWith("pos",o,f.index+1).pos,g=.33*g+.33;var w=a(e,g),b=this.weight/(this.weight+u.positionWeight);u.positionWeight+=this.weight;var E=c.position;if(E.x=E.x+(w[0]-E.x)*b,E.y=E.y+(w[1]-E.y)*b,E.z=E.z+(w[2]-E.z)*b,this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD){var T=a(e,1.01*g);t.set(T[0],T[1],T[2]),t.sub(E),t.y=0,t.normalize();var x=Math.atan2(t.x,t.z);c.rotation.set(0,x,0)}}}else if("rot"===p)if(THREE.Quaternion.slerp(v,y,r,g),0===u.quaternionWeight)c.quaternion.copy(r),u.quaternionWeight=this.weight;else{var b=this.weight/(this.weight+u.quaternionWeight);THREE.Quaternion.slerp(c.quaternion,r,c.quaternion,b),u.quaternionWeight+=this.weight}else if("scl"===p){i.x=v[0]+(y[0]-v[0])*g,i.y=v[1]+(y[1]-v[1])*g,i.z=v[2]+(y[2]-v[2])*g;var b=this.weight/(this.weight+u.scaleWeight);c.scale.lerp(i,b),u.scaleWeight+=this.weight}}return!0}}}(),getNextKeyWith:function(e,t,i){var r=this.data.hierarchy[t].keys;for(this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?i=i<r.length-1?i:r.length-1:i%=r.length;i<r.length;i++)if(void 0!==r[i][e])return r[i];return this.data.hierarchy[t].keys[0]},getPrevKeyWith:function(e,t,i){var r=this.data.hierarchy[t].keys;for(i=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?i>0?i:0:i>=0?i:i+r.length;i>=0;i--)if(void 0!==r[i][e])return r[i];return this.data.hierarchy[t].keys[r.length-1]}},THREE.AnimationHandler={LINEAR:0,CATMULLROM:1,CATMULLROM_FORWARD:2,add:function(){console.warn("THREE.AnimationHandler.add() has been deprecated.")},get:function(){console.warn("THREE.AnimationHandler.get() has been deprecated.")},remove:function(){console.warn("THREE.AnimationHandler.remove() has been deprecated.")},animations:[],init:function(e){if(e.initialized===!0)return e;for(var t=0;t<e.hierarchy.length;t++){for(var i=0;i<e.hierarchy[t].keys.length;i++)if(e.hierarchy[t].keys[i].time<0&&(e.hierarchy[t].keys[i].time=0),void 0!==e.hierarchy[t].keys[i].rot&&!(e.hierarchy[t].keys[i].rot instanceof THREE.Quaternion)){var r=e.hierarchy[t].keys[i].rot;e.hierarchy[t].keys[i].rot=(new THREE.Quaternion).fromArray(r)}if(e.hierarchy[t].keys.length&&void 0!==e.hierarchy[t].keys[0].morphTargets){for(var a={},i=0;i<e.hierarchy[t].keys.length;i++)for(var n=0;n<e.hierarchy[t].keys[i].morphTargets.length;n++){var s=e.hierarchy[t].keys[i].morphTargets[n];a[s]=-1}e.hierarchy[t].usedMorphTargets=a;for(var i=0;i<e.hierarchy[t].keys.length;i++){var o={};for(var s in a){for(var n=0;n<e.hierarchy[t].keys[i].morphTargets.length;n++)if(e.hierarchy[t].keys[i].morphTargets[n]===s){o[s]=e.hierarchy[t].keys[i].morphTargetsInfluences[n];break}n===e.hierarchy[t].keys[i].morphTargets.length&&(o[s]=0)}e.hierarchy[t].keys[i].morphTargetsInfluences=o}}for(var i=1;i<e.hierarchy[t].keys.length;i++)e.hierarchy[t].keys[i].time===e.hierarchy[t].keys[i-1].time&&(e.hierarchy[t].keys.splice(i,1),i--);for(var i=0;i<e.hierarchy[t].keys.length;i++)e.hierarchy[t].keys[i].index=i}return e.initialized=!0,e},parse:function(e){var t=function(e,i){i.push(e);for(var r=0;r<e.children.length;r++)t(e.children[r],i)},i=[];if(e instanceof THREE.SkinnedMesh)for(var r=0;r<e.skeleton.bones.length;r++)i.push(e.skeleton.bones[r]);else t(e,i);return i},play:function(e){-1===this.animations.indexOf(e)&&this.animations.push(e)},stop:function(e){var t=this.animations.indexOf(e);-1!==t&&this.animations.splice(t,1)},update:function(e){for(var t=0;t<this.animations.length;t++)this.animations[t].resetBlendWeights();for(var t=0;t<this.animations.length;t++)this.animations[t].update(e)}},THREE.KeyFrameAnimation=function(e){this.root=e.node,this.data=THREE.AnimationHandler.init(e),this.hierarchy=THREE.AnimationHandler.parse(this.root),this.currentTime=0,this.timeScale=.001,this.isPlaying=!1,this.isPaused=!0,this.loop=!0;for(var t=0,i=this.hierarchy.length;i>t;t++){var r=this.data.hierarchy[t].keys,a=this.data.hierarchy[t].sids,n=this.hierarchy[t];if(r.length&&a){for(var s=0;s<a.length;s++){var o=a[s],h=this.getNextKeyWith(o,t,0);h&&h.apply(o)}n.matrixAutoUpdate=!1,this.data.hierarchy[t].node.updateMatrix(),n.matrixWorldNeedsUpdate=!0}}},THREE.KeyFrameAnimation.prototype={constructor:THREE.KeyFrameAnimation,play:function(e){if(this.currentTime=void 0!==e?e:0,this.isPlaying===!1){this.isPlaying=!0;var t,i,r,a=this.hierarchy.length;for(t=0;a>t;t++){i=this.hierarchy[t],r=this.data.hierarchy[t],void 0===r.animationCache&&(r.animationCache={},r.animationCache.prevKey=null,r.animationCache.nextKey=null,r.animationCache.originalMatrix=i.matrix);var n=this.data.hierarchy[t].keys;n.length>1&&(r.animationCache.prevKey=n[0],r.animationCache.nextKey=n[1],this.startTime=Math.min(n[0].time,this.startTime),this.endTime=Math.max(n[n.length-1].time,this.endTime))}this.update(0)}this.isPaused=!1},stop:function(){this.isPlaying=!1,this.isPaused=!1;for(var e=0;e<this.data.hierarchy.length;e++){var t=this.hierarchy[e],i=this.data.hierarchy[e];if(void 0!==i.animationCache){var r=i.animationCache.originalMatrix;r.copy(t.matrix),t.matrix=r,delete i.animationCache}}},update:function(e){if(this.isPlaying!==!1){this.currentTime+=e*this.timeScale;var t=this.data.length;this.loop===!0&&this.currentTime>t&&(this.currentTime%=t),this.currentTime=Math.min(this.currentTime,t);for(var i=0,r=this.hierarchy.length;r>i;i++){var a=this.hierarchy[i],n=this.data.hierarchy[i],s=n.keys,o=n.animationCache;if(s.length){var h=o.prevKey,c=o.nextKey;if(c.time<=this.currentTime){for(;c.time<this.currentTime&&c.index>h.index;)h=c,c=s[h.index+1];o.prevKey=h,o.nextKey=c}c.time>=this.currentTime?h.interpolate(c,this.currentTime):h.interpolate(c,c.time),this.data.hierarchy[i].node.updateMatrix(),a.matrixWorldNeedsUpdate=!0}}}},getNextKeyWith:function(e,t,i){var r=this.data.hierarchy[t].keys;for(i%=r.length;i<r.length;i++)if(r[i].hasTarget(e))return r[i];return r[0]},getPrevKeyWith:function(e,t,i){var r=this.data.hierarchy[t].keys;for(i=i>=0?i:i+r.length;i>=0;i--)if(r[i].hasTarget(e))return r[i];return r[r.length-1]}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
