function saveLocal(e,t){localStorage[e]=JSON.stringify(t)}function getJSONLocal(e){var t=null;try{var r=localStorage[e];void 0!==r&&(t=JSON.parse(r))}catch(o){}return t}function deleteLocal(e){localStorage.removeItem(e)}function ClosureMessage(e){return function(t){return function(){t(e)}}}function emptyOrUndefined(e){return void 0==e||""===e}function RandPosition(e){var t=e||{min:0,max:100},r=chance.floating(t),o=chance.floating(t),n=chance.floating(t);return[r,o,n]}function RandColor(e){var t=e||{min:0,max:1,fixed:2},r=chance.floating(t),o=chance.floating(t),n=chance.floating(t);return[r,o,n,1]}function RandSize(e){var t=e||{min:.1,max:2,fixed:1},r=chance.floating(t);return[r,r,r]}function RandRotation(e){var t=Number(chance.bool()),r=Number(chance.bool()),o=Number(chance.bool());return{angle:chance.integer({min:0,max:360}),axis:[t,r,o]}}function generate(e){return function(){var t=chance.integer({min:0,max:100});return Array.apply(0,Array(t)).map(e)}}var app=angular.module("artoolkit",["ionic","ngResource"]);angular.module("artoolkit").run(["$ionicPlatform","$rootScope","$state",function(e,t,r){t.go=function(e,t){r.go(e,t)},e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}]),angular.module("artoolkit").config(["$stateProvider","$urlRouterProvider","$httpProvider",function(e,t,r){e.state("login",{url:"/login",onEnter:["$rootScope",function(e){getJSONLocal("user")&&e.go("app.ar")}],templateUrl:"src/views/login/main.html",controller:"LoginCtrl"}).state("app",{url:"/",onEnter:["$rootScope",function(e){getJSONLocal("user")||e.go("login")}],templateUrl:"src/views/main.html",controller:"AppCtrl","abstract":!0}).state("app.ar",{url:"ar",onEnter:["$rootScope",function(e){getJSONLocal("user")||e.go("login")}],views:{content:{templateUrl:"src/views/ar/main.html",controller:"ARCtrl"}}}),t.otherwise("/login"),r.interceptors.push("AuthInterceptor")}]),angular.module("artoolkit").controller("AppCtrl",["$rootScope","$scope","OauthService",function(e,t,r){t.logout=function(){r.logout().Session(function(t){var r=t;r.error||(deleteLocal("user"),e.go("login"))})}}]),angular.module("artoolkit").controller("ARCtrl",["$scope","ARObject",function(e,t){var r=t.createIcosahedron();e.actions={onCreate:function(e,t){console.log("create"),e.add(r)},onUpdate:function(e,t){console.log("update")},onDestroy:function(e,t){console.log("remove"),e.remove(r)}}}]),angular.module("artoolkit").controller("LoginCtrl",["$rootScope","$scope","OauthService","RequestService",function(e,t,r,o){t.user={email:"",password:""},t.login=function(){async.waterfall([function(e){var r=emptyOrUndefined(t.user.email),o=emptyOrUndefined(t.user.password);r||o?r?e("Email Empty"):o&&e("Password Empty"):e()},function(e){r.login().Session(t.user,function(t){return t.error?e(t.error):void e(null,t.data)},o.ServerNotFound(e))},function(e,t){r.role().check({role:e.role},function(r){return r.error?t(r.error):void(1==r.data||0==r.data?t(null,e):o.NoRoleAuthorized(t)())},o.ServerNotFound(t))}],function(t,r){return t?alert(t):(saveLocal("user",r),void e.go("app.ar"))})}}]),angular.module("artoolkit").directive("arView",["ARUtils","ARCamera","AR","$ionicPlatform",function(e,t,r,o){return{restrict:"A",scope:{actions:"=actions"},link:function(n,a,i){var c=a[0];console.log(n.actions),o.ready(function(){e.size(c),e.setVideoSize(),t.wait(function(){r.init(c,n.actions),r.tick()})})}}}]),angular.module("artoolkit").factory("AR3D",function(){var e=function(e){function t(){a.needsUpdate=!0}var r=new THREE.Camera,o=new THREE.Scene,n=new THREE.PlaneGeometry(2,2,0),a=new THREE.Texture(e);a.generateMipmaps=!1,a.minFilter=THREE.NearestFilter,a.magFilter=THREE.NearestFilter,a.wrapS=a.wrapT=THREE.ClampToEdgeWrapping;var i=new THREE.MeshBasicMaterial({map:a,depthTest:!1,depthWrite:!1}),c=new THREE.Mesh(n,i);return o.add(c),{camera:r,scene:o,update:t}},t=function(){function e(e){r.add(e)}function t(e){r.remove(e)}var r=new THREE.Scene,o=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3);return o.position.z=5,{scene:r,camera:o,add:e,remove:t}},r=function(r,o,n){function a(){l.render(s.scene,s.camera),l.render(d.scene,d.camera)}function i(){s.update()}function c(e){d.add(e)}function u(e){d.remove(e)}var l=new THREE.WebGLRenderer({canvas:r,antialias:!0});l.setSize(o.width,o.height),l.setPixelRatio(window.devicePixelRatio),l.autoClear=!1;var s=new e(n),d=new t,f=new THREE.SpotLight(16777215);return f.position.set(0,0,9e3),f.lookAt(new THREE.Vector3(0,0,0)),d.scene.add(f),{add:c,remove:u,update:i,render:a,glCanvas:r,virtual:d.scene}};return{create:r}}),angular.module("artoolkit").factory("ARCamera",["ARUtils","$ionicPlatform",function(e,t){var r=document.getElementById("video"),o=function(e,t,r){var o=void 0;return navigator.getUserMedia?o=navigator.getUserMedia(e,t,r):navigator.webkitGetUserMedia&&(o=navigator.webkitGetUserMedia(e,t,r)),o},n=function(e){return function(t){var o=window.URL||window.webkitURL;r.src=o.createObjectURL(t),r.play(),e()}},a=function(e){console.log("An error occured! "+e)},i=function(e){o({video:!0,audio:!1},n(e),a)},c=function(){return{width:r.width,height:r.height}},u=function(e){e.drawImage(r,0,0)};return{wait:i,copyToContext:u,getDimensions:c}}]),angular.module("artoolkit").factory("ARDetector",function(){function e(e){var t=new NyARRgbRaster_Canvas2D(e),r=new FLARParam(e.width,e.height),o=new FLARMultiIdMarkerDetector(r,120);o.setContinueMode(!0);var n=function(e){var t=o.getIdMarkerData(e);if(t.packetLength>4)return-1;for(var r=0,n=0;n<t.packetLength;n++)r=r<<8|t.getPacketData(n);return r},a=function(e){var t=new NyARTransMatResult;o.getTransformMatrix(e,t);var r=new Float32Array(16);return r[0]=t.m00,r[1]=-t.m10,r[2]=t.m20,r[3]=0,r[4]=t.m01,r[5]=-t.m11,r[6]=t.m21,r[7]=0,r[8]=-t.m02,r[9]=t.m12,r[10]=-t.m22,r[11]=0,r[12]=t.m03,r[13]=-t.m13,r[14]=t.m23,r[15]=1,r},i=function(e,t){var o=new Float32Array(16);return r.copyCameraMatrix(o,e,t),o},c=1,u=function(e,t){return{id:e,matrix:t,age:c}},l={},s=function(e,r,i){for(var s=o.detectMarkerLite(t,70),d=0;s>d;d++){var f=n(d),g=l[f];void 0===g?(g=u(f,a(d)),l[f]=g,e(g)):(g.matrix=a(d),g.age=c,r(g))}for(var f in l){var g=l[f];g&&0==g.age--&&(i(g),delete l[f])}};return{detect:s,getCameraMatrix:i}}return{create:e}}),angular.module("artoolkit").factory("AR",["ARCamera","ARDetector","AR3D","ARMarker",function(e,t,r,o){var n,a,i,c,u,l=function(l,s){s=s||{},u={},n=document.createElement("canvas");var d=e.getDimensions();n.width=d.width,n.height=d.height,a=n.getContext("2d"),i=t.create(n),c=r.create(l,d,n),u.onCreate=o.Primitive(c,s.onCreate||o.onCreate),u.onUpdate=o.Primitive(c,s.onUpdate||o.onUpdate),u.onDestroy=o.Primitive(c,s.onDestroy||o.onDestroy)},s=function(){e.copyToContext(a),n.changed=!0,i.detect(u.onCreate,u.onUpdate,u.onDestroy),c.update(),c.render(),window.requestAnimationFrame(s)};return{init:l,tick:s}}]),angular.module("artoolkit").factory("ARMarker",["ARObject",function(e){var t={16:e.createBasicCube({color:13369344}),32:e.createBasicCube({color:52224}),64:e.createBasicCube({color:204})},r=function(e,r){console.log("Created"),console.log(r.id);var o=t[r.id];o.rotation.x+=.1,o.rotation.y+=.1,e.add(o)},o=function(e,r){console.log("update"),console.log(r.id);var o=t[r.id];o.rotation.x+=.1,o.rotation.y+=.1},n=function(e,r){console.log("remove"),console.log(r.id);var o=t[r.id];e.remove(o)},a=function(e,t){return function(r){t(e,r)}};return{Primitive:a,onCreate:r,onUpdate:o,onDestroy:n}}]),angular.module("artoolkit").factory("ARObject",function(){return{createBasicCube:function(e){var t=new THREE.BoxGeometry(1,1,1),r=new THREE.MeshBasicMaterial({color:e}),o=new THREE.Mesh(t,r);return o.position.z=-5,o},createPhongCube:function(){var e=new THREE.BoxGeometry(1,1,1),t=new THREE.MeshPhongMaterial({color:8375321,shininess:230}),r=new THREE.Mesh(e,t);return r},createGradientPlane:function(){var e=document.createElement("canvas");e.width=128,e.height=128;var t=e.getContext("2d"),r=t.createRadialGradient(e.width/2,e.height/2,0,e.width/2,e.height/2,e.width/2);r.addColorStop(.1,"rgba(210,210,210,1)"),r.addColorStop(1,"rgba(255,255,255,1)"),t.fillStyle=r,t.fillRect(0,0,e.width,e.height);var o=new THREE.Texture(e);o.needsUpdate=!0;var n=new THREE.MeshBasicMaterial({map:o}),a=new THREE.PlaneBufferGeometry(300,300,1,1),i=new THREE.Mesh(a,n);return i},createIcosahedron:function(){for(var e,t,r,o,n=1,a=["a","b","c"],i=new THREE.IcosahedronGeometry(n,1),c=0;c<i.faces.length;c++){t=i.faces[c];for(var u=0;3>u;u++)o=t[a[u]],r=i.vertices[o],e=new THREE.Color(16777215),e.setHSL((r.y/n+1)/2,1,.5),t.vertexColors[u]=e}var l=[new THREE.MeshPhongMaterial({color:16777215,shading:THREE.FlatShading,vertexColors:THREE.VertexColors,shininess:0}),new THREE.MeshBasicMaterial({color:0,shading:THREE.FlatShading,wireframe:!0,transparent:!0})];return THREE.SceneUtils.createMultiMaterialObject(i,l)}}}),angular.module("artoolkit").factory("ARUtils",["$ionicPlatform",function(e){var t=function(e){e.width=window.innerWidth,e.height=window.innerHeight};return{size:t,setVideoSize:function(){t(document.getElementById("video"))}}}]),angular.module("artoolkit").factory("ApiService",["$resource","$location",function(e,t){return{env:"prod",prod:{protocol:"https",host:"pickyourday.herokuapp.com",port:"",root:"api"},dev:{protocol:"http",host:"localhost",port:"5000",root:"api"},getApiPath:function(e){var t=this[this.env];return t.protocol+"://"+t.host+(""!==t.port?":"+t.port:"")+"/"+t.root+"/"+e},rest:function(t,r,o){var n=e(this.getApiPath(t),o||{},r||{});return n}}}]),angular.module("artoolkit").factory("AuthInterceptor",["$q","$location",function(e,t){return{request:function(e){e.headers=e.headers||{};var t=getJSONLocal("user"),t=getJSONLocal("user");return!e.headers.Authorization&&t&&(e.headers.Authorization=t.token),e},requestError:function(t){return e.reject(t)},response:function(t){return"ERROR"===t.data.status?e.reject(t):t||e.when(t)},responseError:function(r){return 403===r.status?(console.error("Error de acceso"),localStorage.user="",void t.path("/")):e.reject(r)}}}]),angular.module("artoolkit").factory("OauthService",["ApiService",function(e){return{base:"oauth",login:function(){return e.rest(this.base,{Session:{method:"POST",params:{}}})},logout:function(){return e.rest(this.base+"/logout",{Session:{method:"GET",params:{}}})},role:function(){return e.rest(this.base+"/role/:role",{check:{method:"GET",params:{role:"@role"}}})}}}]),angular.module("artoolkit").factory("RequestService",function(){return{ServerNotFound:ClosureMessage("Server Not Found"),NoRoleAuthorized:ClosureMessage("No Role Authorized")}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
