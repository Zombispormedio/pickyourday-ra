var app=angular.module("ar-toolkit",["ionic"]);angular.module("ar-toolkit").run(["$ionicPlatform",function(e){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}]),angular.module("ar-toolkit").directive("arView",["ARUtils","ARCamera","AR",function(e,t,r){return{restrict:"A",link:function(n,a,o){var i=a[0];e.size(i),t.wait(function(){r.init(i),r.tick()})}}}]),angular.module("ar-toolkit").factory("AR3D",function(){var e=function(e){function t(){o.needsUpdate=!0}var r=new THREE.Camera,n=new THREE.Scene,a=new THREE.PlaneGeometry(2,2,0),o=new THREE.Texture(e);o.generateMipmaps=!1,o.minFilter=THREE.NearestFilter,o.magFilter=THREE.NearestFilter,o.wrapS=o.wrapT=THREE.ClampToEdgeWrapping;var i=new THREE.MeshBasicMaterial({map:o,depthTest:!1,depthWrite:!1}),c=new THREE.Mesh(a,i);return n.add(c),{camera:r,scene:n,update:t}},t=function(){function e(e){n.add(e)}function t(e){n.remove(e)}function r(e){a.projectionMatrix.setFromArray(e)}var n=new THREE.Scene,a=new THREE.Camera;return{scene:n,camera:a,add:e,remove:t,setProjectionMatrix:r}},r=function(r,n,a){function o(){l.render(s.scene,s.camera),l.render(m.scene,m.camera)}function i(){s.update()}function c(e){m.add(e.model)}function u(e){m.setProjectionMatrix(e)}function d(e){m.remove(e.model)}var l=new THREE.WebGLRenderer({canvas:r});l.setSize(n.width,n.height),l.autoClear=!1;var s=new e(a),m=new t,f=new THREE.SpotLight(16777215);return f.position.set(0,0,9e3),f.lookAt(new THREE.Vector3(0,0,0)),m.scene.add(f),{add:c,remove:d,update:i,render:o,glCanvas:r,setCameraMatrix:u}};return{create:r}}),angular.module("ar-toolkit").factory("ARCamera",["ARUtils",function(e){var t=document.getElementById("video");e.size(t);var r=function(e,t,r){var n=void 0;return navigator.getUserMedia?n=navigator.getUserMedia(e,t,r):navigator.webkitGetUserMedia&&(n=navigator.webkitGetUserMedia(e,t,r)),n},n=function(e){return function(r){var n=window.URL||window.webkitURL;t.src=n.createObjectURL(r),t.play(),e()}},a=function(e){console.log("An error occured! "+e)},o=function(e){r({video:!0,audio:!1},n(e),a)},i=function(){return{width:t.width,height:t.height}},c=function(e){e.drawImage(t,0,0)};return{wait:o,copyToContext:c,getDimensions:i}}]),angular.module("ar-toolkit").factory("ARDetector",function(){function e(e){var t=new NyARRgbRaster_Canvas2D(e),r=new FLARParam(e.width,e.height),n=new FLARMultiIdMarkerDetector(r,120);n.setContinueMode(!0);var a=function(e){var t=n.getIdMarkerData(e);if(t.packetLength>4)return-1;for(var r=0,a=0;a<t.packetLength;a++)r=r<<8|t.getPacketData(a);return r},o=function(e){var t=new NyARTransMatResult;n.getTransformMatrix(e,t);var r=new Float32Array(16);return r[0]=t.m00,r[1]=-t.m10,r[2]=t.m20,r[3]=0,r[4]=t.m01,r[5]=-t.m11,r[6]=t.m21,r[7]=0,r[8]=-t.m02,r[9]=t.m12,r[10]=-t.m22,r[11]=0,r[12]=t.m03,r[13]=-t.m13,r[14]=t.m23,r[15]=1,r},i=function(e,t){var n=new Float32Array(16);return r.copyCameraMatrix(n,e,t),n},c=1,u=function(e,t){return{id:e,matrix:t,age:c}},d={},l=function(e,r,i){for(var l=n.detectMarkerLite(t,70),s=0;l>s;s++){var m=a(s),f=d[m];void 0===f?(f=u(m,o(s)),d[m]=f,e(f)):(f.matrix=o(s),f.age=c,r(f))}for(var m in d){var f=d[m];f&&0==f.age--&&(i(f),delete d[m])}};return{detect:l,getCameraMatrix:i}}return{create:e}}),angular.module("ar-toolkit").factory("AR",["ARCamera","ARDetector","AR3D","ARMarker",function(e,t,r,n){var a,o,i,c,u=function(n){a=document.createElement("canvas");var u=e.getDimensions();console.log(u),a.width=u.width,a.height=u.height,o=a.getContext("2d"),i=t.create(a),c=r.create(n,u,a),c.setCameraMatrix(i.getCameraMatrix(10,1e3))},d=function(){e.copyToContext(o),a.changed=!0,i.detect(n.onCreate,n.onUpdate,n.onDestroy),c.update(),c.render(),window.requestAnimationFrame(d)};return{init:u,tick:d,getView:c}}]),angular.module("ar-toolkit").factory("ARMarker",function(){var e=function(e){console.log(e)},t=function(e){console.log(e)},r=function(e){console.log(e)};return{onCreate:e,onUpdate:t,onDestroy:r}}),angular.module("ar-toolkit").factory("ARUtils",["$ionicPlatform",function(e){return{size:function(t){t.width=window.innerWidth,t.height=window.innerHeight,e.ready(function(){t.width=window.innerWidth,t.height=window.innerHeight})}}}]),THREE.Matrix4.prototype.setFromArray=function(e){return this.set(e[0],e[4],e[8],e[12],e[1],e[5],e[9],e[13],e[2],e[6],e[10],e[14],e[3],e[7],e[11],e[15])},THREE.Object3D.prototype.transformFromArray=function(e){this.matrix.setFromArray(e),this.matrixWorldNeedsUpdate=!0};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
