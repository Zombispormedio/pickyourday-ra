var app=angular.module("ar-toolkit",["ionic"]);angular.module("ar-toolkit").run(["$ionicPlatform",function(e){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}]),angular.module("ar-toolkit").directive("arView",["ARUtils","ARCamera","AR","$ionicPlatform",function(e,t,n,r){return{restrict:"A",scope:{actions:"=actions"},link:function(o,a,i){var c=a[0];console.log(o.actions),r.ready(function(){e.size(c),e.setVideoSize(),t.wait(function(){n.init(c,o.actions),n.tick()})})}}}]),angular.module("ar-toolkit").controller("ARController",["$scope","ARObject",function(e,t){var n=t.createIcosahedron();e.actions={onCreate:function(e,t){console.log("create"),e.add(n)},onUpdate:function(e,t){console.log("update")},onDestroy:function(e,t){console.log("remove"),e.remove(n)}}}]),angular.module("ar-toolkit").factory("AR3D",function(){var e=function(e){function t(){a.needsUpdate=!0}var n=new THREE.Camera,r=new THREE.Scene,o=new THREE.PlaneGeometry(2,2,0),a=new THREE.Texture(e);a.generateMipmaps=!1,a.minFilter=THREE.NearestFilter,a.magFilter=THREE.NearestFilter,a.wrapS=a.wrapT=THREE.ClampToEdgeWrapping;var i=new THREE.MeshBasicMaterial({map:a,depthTest:!1,depthWrite:!1}),c=new THREE.Mesh(o,i);return r.add(c),{camera:n,scene:r,update:t}},t=function(){function e(e){n.add(e)}function t(e){n.remove(e)}var n=new THREE.Scene,r=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3);return r.position.z=5,{scene:n,camera:r,add:e,remove:t}},n=function(n,r,o){function a(){u.render(l.scene,l.camera),u.render(s.scene,s.camera)}function i(){l.update()}function c(e){s.add(e)}function d(e){s.remove(e)}var u=new THREE.WebGLRenderer({canvas:n,antialias:!0});u.setSize(r.width,r.height),u.setPixelRatio(window.devicePixelRatio),u.autoClear=!1;var l=new e(o),s=new t,f=new THREE.SpotLight(16777215);return f.position.set(0,0,9e3),f.lookAt(new THREE.Vector3(0,0,0)),s.scene.add(f),{add:c,remove:d,update:i,render:a,glCanvas:n,virtual:s.scene}};return{create:n}}),angular.module("ar-toolkit").factory("ARCamera",["ARUtils","$ionicPlatform",function(e,t){var n=document.getElementById("video"),r=function(e,t,n){var r=void 0;return navigator.getUserMedia?r=navigator.getUserMedia(e,t,n):navigator.webkitGetUserMedia&&(r=navigator.webkitGetUserMedia(e,t,n)),r},o=function(e){return function(t){var r=window.URL||window.webkitURL;n.src=r.createObjectURL(t),n.play(),e()}},a=function(e){console.log("An error occured! "+e)},i=function(e){r({video:!0,audio:!1},o(e),a)},c=function(){return{width:n.width,height:n.height}},d=function(e){e.drawImage(n,0,0)};return{wait:i,copyToContext:d,getDimensions:c}}]),angular.module("ar-toolkit").factory("ARDetector",function(){function e(e){var t=new NyARRgbRaster_Canvas2D(e),n=new FLARParam(e.width,e.height),r=new FLARMultiIdMarkerDetector(n,120);r.setContinueMode(!0);var o=function(e){var t=r.getIdMarkerData(e);if(t.packetLength>4)return-1;for(var n=0,o=0;o<t.packetLength;o++)n=n<<8|t.getPacketData(o);return n},a=function(e){var t=new NyARTransMatResult;r.getTransformMatrix(e,t);var n=new Float32Array(16);return n[0]=t.m00,n[1]=-t.m10,n[2]=t.m20,n[3]=0,n[4]=t.m01,n[5]=-t.m11,n[6]=t.m21,n[7]=0,n[8]=-t.m02,n[9]=t.m12,n[10]=-t.m22,n[11]=0,n[12]=t.m03,n[13]=-t.m13,n[14]=t.m23,n[15]=1,n},i=function(e,t){var r=new Float32Array(16);return n.copyCameraMatrix(r,e,t),r},c=1,d=function(e,t){return{id:e,matrix:t,age:c}},u={},l=function(e,n,i){for(var l=r.detectMarkerLite(t,70),s=0;l>s;s++){var f=o(s),g=u[f];void 0===g?(g=d(f,a(s)),u[f]=g,e(g)):(g.matrix=a(s),g.age=c,n(g))}for(var f in u){var g=u[f];g&&0==g.age--&&(i(g),delete u[f])}};return{detect:l,getCameraMatrix:i}}return{create:e}}),angular.module("ar-toolkit").factory("AR",["ARCamera","ARDetector","AR3D","ARMarker",function(e,t,n,r){var o,a,i,c,d,u=function(u,l){l=l||{},d={},o=document.createElement("canvas");var s=e.getDimensions();o.width=s.width,o.height=s.height,a=o.getContext("2d"),i=t.create(o),c=n.create(u,s,o),d.onCreate=r.Primitive(c,l.onCreate||r.onCreate),d.onUpdate=r.Primitive(c,l.onUpdate||r.onUpdate),d.onDestroy=r.Primitive(c,l.onDestroy||r.onDestroy)},l=function(){e.copyToContext(a),o.changed=!0,i.detect(d.onCreate,d.onUpdate,d.onDestroy),c.update(),c.render(),window.requestAnimationFrame(l)};return{init:u,tick:l}}]),angular.module("ar-toolkit").factory("ARMarker",["ARObject",function(e){var t={16:e.createBasicCube({color:13369344}),32:e.createBasicCube({color:52224}),64:e.createBasicCube({color:204})},n=function(e,n){console.log("Created"),console.log(n.id);var r=t[n.id];r.rotation.x+=.1,r.rotation.y+=.1,e.add(r)},r=function(e,n){console.log("update"),console.log(n.id);var r=t[n.id];r.rotation.x+=.1,r.rotation.y+=.1},o=function(e,n){console.log("remove"),console.log(n.id);var r=t[n.id];e.remove(r)},a=function(e,t){return console.log(t),function(n){t(e,n)}};return{Primitive:a,onCreate:n,onUpdate:r,onDestroy:o}}]),angular.module("ar-toolkit").factory("ARObject",function(){return{createBasicCube:function(e){var t=new THREE.BoxGeometry(1,1,1),n=new THREE.MeshBasicMaterial({color:e}),r=new THREE.Mesh(t,n);return r.position.z=-5,r},createPhongCube:function(){var e=new THREE.BoxGeometry(1,1,1),t=new THREE.MeshPhongMaterial({color:8375321,shininess:230}),n=new THREE.Mesh(e,t);return n},createGradientPlane:function(){var e=document.createElement("canvas");e.width=128,e.height=128;var t=e.getContext("2d"),n=t.createRadialGradient(e.width/2,e.height/2,0,e.width/2,e.height/2,e.width/2);n.addColorStop(.1,"rgba(210,210,210,1)"),n.addColorStop(1,"rgba(255,255,255,1)"),t.fillStyle=n,t.fillRect(0,0,e.width,e.height);var r=new THREE.Texture(e);r.needsUpdate=!0;var o=new THREE.MeshBasicMaterial({map:r}),a=new THREE.PlaneBufferGeometry(300,300,1,1),i=new THREE.Mesh(a,o);return i},createIcosahedron:function(){for(var e,t,n,r,o=1,a=["a","b","c"],i=new THREE.IcosahedronGeometry(o,1),c=0;c<i.faces.length;c++){t=i.faces[c];for(var d=0;3>d;d++)r=t[a[d]],n=i.vertices[r],e=new THREE.Color(16777215),e.setHSL((n.y/o+1)/2,1,.5),t.vertexColors[d]=e}var u=[new THREE.MeshPhongMaterial({color:16777215,shading:THREE.FlatShading,vertexColors:THREE.VertexColors,shininess:0}),new THREE.MeshBasicMaterial({color:0,shading:THREE.FlatShading,wireframe:!0,transparent:!0})];return THREE.SceneUtils.createMultiMaterialObject(i,u)}}}),angular.module("ar-toolkit").factory("ARUtils",["$ionicPlatform",function(e){var t=function(e){e.width=window.innerWidth,e.height=window.innerHeight};return{size:t,setVideoSize:function(){t(document.getElementById("video"))}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbmZpZy9ib290LmpzIiwiY29tcG9uZW50cy9kaXJlY3RpdmVzL2FyX3ZpZXdfZGlyZWN0aXZlLmpzIiwiY29tcG9uZW50cy9jb250cm9sbGVycy9hcl9jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9mYWN0b3JpZXMvYXJfM2RfZmFjdG9yeS5qcyIsImNvbXBvbmVudHMvZmFjdG9yaWVzL2FyX2NhbWVyYV9mYWN0b3J5LmpzIiwiY29tcG9uZW50cy9mYWN0b3JpZXMvYXJfZGV0ZWN0b3JfZmFjdG9yeS5qcyIsImNvbXBvbmVudHMvZmFjdG9yaWVzL2FyX2ZhY3RvcnkuanMiLCJjb21wb25lbnRzL2ZhY3Rvcmllcy9hcl9tYXJrZXJfZmFjdG9yeS5qcyIsImNvbXBvbmVudHMvZmFjdG9yaWVzL2FyX29iamVjdF9mYWN0b3J5LmpzIiwiY29tcG9uZW50cy9mYWN0b3JpZXMvYXJfdXRpbHNfZmFjdG9yeS5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwicnVuIiwiJGlvbmljUGxhdGZvcm0iLCJyZWFkeSIsIndpbmRvdyIsImNvcmRvdmEiLCJwbHVnaW5zIiwiS2V5Ym9hcmQiLCJoaWRlS2V5Ym9hcmRBY2Nlc3NvcnlCYXIiLCJkaXNhYmxlU2Nyb2xsIiwiU3RhdHVzQmFyIiwic3R5bGVEZWZhdWx0IiwiZGlyZWN0aXZlIiwiQVJVdGlscyIsIkFSQ2FtZXJhIiwiQVIiLCJyZXN0cmljdCIsInNjb3BlIiwiYWN0aW9ucyIsImxpbmsiLCJ0RWxlbWVudCIsImF0dHJzIiwiZWxlbSIsImNvbnNvbGUiLCJsb2ciLCJzaXplIiwic2V0VmlkZW9TaXplIiwid2FpdCIsImluaXQiLCJ0aWNrIiwiY29udHJvbGxlciIsIiRzY29wZSIsIkFST2JqZWN0Iiwib2JqZWN0IiwiY3JlYXRlSWNvc2FoZWRyb24iLCJvbkNyZWF0ZSIsInZpZXciLCJtYXJrZXIiLCJhZGQiLCJvblVwZGF0ZSIsIm9uRGVzdHJveSIsInJlbW92ZSIsImZhY3RvcnkiLCJSZWFsaXR5Iiwic291cmNlQ2FudmFzIiwidXBkYXRlIiwidGV4dHVyZSIsIm5lZWRzVXBkYXRlIiwiY2FtZXJhIiwiVEhSRUUiLCJDYW1lcmEiLCJzY2VuZSIsIlNjZW5lIiwiZ2VvbWV0cnkiLCJQbGFuZUdlb21ldHJ5IiwiVGV4dHVyZSIsImdlbmVyYXRlTWlwbWFwcyIsIm1pbkZpbHRlciIsIk5lYXJlc3RGaWx0ZXIiLCJtYWdGaWx0ZXIiLCJ3cmFwUyIsIndyYXBUIiwiQ2xhbXBUb0VkZ2VXcmFwcGluZyIsIm1hdGVyaWFsIiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJtYXAiLCJkZXB0aFRlc3QiLCJkZXB0aFdyaXRlIiwibWVzaCIsIk1lc2giLCJQZXJzcGVjdGl2ZUNhbWVyYSIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInBvc2l0aW9uIiwieiIsImNyZWF0ZSIsImdsQ2FudmFzIiwiZGltZW5zaW9ucyIsInJlbmRlciIsInJlbmRlcmVyIiwicmVhbGl0eSIsInZpcnR1YWwiLCJXZWJHTFJlbmRlcmVyIiwiY2FudmFzIiwiYW50aWFsaWFzIiwic2V0U2l6ZSIsIndpZHRoIiwiaGVpZ2h0Iiwic2V0UGl4ZWxSYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJhdXRvQ2xlYXIiLCJsaWdodCIsIlNwb3RMaWdodCIsInNldCIsImxvb2tBdCIsIlZlY3RvcjMiLCJ2aWRlbyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRNZWRpYUNhcHR1cmUiLCJ0Iiwib25zdWNjZXNzIiwib25lcnJvciIsInJlc3VsdCIsInVuZGVmaW5lZCIsIm5hdmlnYXRvciIsImdldFVzZXJNZWRpYSIsIndlYmtpdEdldFVzZXJNZWRpYSIsIm9uU3VjY2VzcyIsImNiIiwic3RyZWFtIiwidmVuZG9yVVJMIiwiVVJMIiwid2Via2l0VVJMIiwic3JjIiwiY3JlYXRlT2JqZWN0VVJMIiwicGxheSIsIm9uRXJyb3IiLCJlcnIiLCJ3YWl0Q2FtZXJhIiwiY2FsbGJhY2siLCJhdWRpbyIsImdldERpbWVuc2lvbnMiLCJjb3B5VG9Db250ZXh0IiwiY29udGV4dCIsImRyYXdJbWFnZSIsIkpTQVJSYXN0ZXIiLCJOeUFSUmdiUmFzdGVyX0NhbnZhczJEIiwiSlNBUlBhcmFtZXRlcnMiLCJGTEFSUGFyYW0iLCJKU0FSRGV0ZWN0b3IiLCJGTEFSTXVsdGlJZE1hcmtlckRldGVjdG9yIiwic2V0Q29udGludWVNb2RlIiwiZ2V0TWFya2VyTnVtYmVyIiwiaWR4IiwiZGF0YSIsImdldElkTWFya2VyRGF0YSIsInBhY2tldExlbmd0aCIsImkiLCJnZXRQYWNrZXREYXRhIiwiZ2V0VHJhbnNmb3JtTWF0cml4IiwibWF0IiwiTnlBUlRyYW5zTWF0UmVzdWx0IiwiY20iLCJGbG9hdDMyQXJyYXkiLCJtMDAiLCJtMTAiLCJtMjAiLCJtMDEiLCJtMTEiLCJtMjEiLCJtMDIiLCJtMTIiLCJtMjIiLCJtMDMiLCJtMTMiLCJtMjMiLCJnZXRDYW1lcmFNYXRyaXgiLCJ6TmVhciIsInpGYXIiLCJjb3B5Q2FtZXJhTWF0cml4IiwicGVyc2lzdFRpbWUiLCJuZXdNYXJrZXIiLCJpZCIsIm1hdHJpeCIsImFnZSIsIm1hcmtlcnMiLCJkZXRlY3QiLCJtYXJrZXJDb3VudCIsImRldGVjdE1hcmtlckxpdGUiLCJpbmRleCIsIkFSRGV0ZWN0b3IiLCJBUjNEIiwiQVJNYXJrZXIiLCJkZXRlY3RvciIsIm1hcmtlcl9hY3Rpb25zIiwiY3JlYXRlRWxlbWVudCIsImNhbWVyYURpbWVuc2lvbnMiLCJnZXRDb250ZXh0IiwiUHJpbWl0aXZlIiwiY2hhbmdlZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9iamVjdHMiLDE2LCJjcmVhdGVCYXNpY0N1YmUiLCJjb2xvciIsMzIsNjQsInJvdGF0aW9uIiwieCIsInkiLCJCb3hHZW9tZXRyeSIsImN1YmUiLCJjcmVhdGVQaG9uZ0N1YmUiLCJNZXNoUGhvbmdNYXRlcmlhbCIsInNoaW5pbmVzcyIsImNyZWF0ZUdyYWRpZW50UGxhbmUiLCJncmFkaWVudCIsImNyZWF0ZVJhZGlhbEdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJzaGFkb3dUZXh0dXJlIiwic2hhZG93TWF0ZXJpYWwiLCJzaGFkb3dHZW8iLCJQbGFuZUJ1ZmZlckdlb21ldHJ5IiwiZiIsInAiLCJ2ZXJ0ZXhJbmRleCIsInJhZGl1cyIsImZhY2VJbmRpY2VzIiwiSWNvc2FoZWRyb25HZW9tZXRyeSIsImZhY2VzIiwibGVuZ3RoIiwiaiIsInZlcnRpY2VzIiwiQ29sb3IiLCJzZXRIU0wiLCJ2ZXJ0ZXhDb2xvcnMiLCJtYXRlcmlhbHMiLCJzaGFkaW5nIiwiRmxhdFNoYWRpbmciLCJWZXJ0ZXhDb2xvcnMiLCJ3aXJlZnJhbWUiLCJ0cmFuc3BhcmVudCIsIlNjZW5lVXRpbHMiLCJjcmVhdGVNdWx0aU1hdGVyaWFsT2JqZWN0Il0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxLQUFBQyxRQUFBQyxPQUFBLGNBQUEsU0NBQUQsU0FBQUMsT0FBQSxjQUNBQyxLQUFBLGlCQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLE1BQUEsV0FDQUMsT0FBQUMsU0FBQUQsT0FBQUMsUUFBQUMsUUFBQUMsV0FHQUYsUUFBQUMsUUFBQUMsU0FBQUMsMEJBQUEsR0FLQUgsUUFBQUMsUUFBQUMsU0FBQUUsZUFBQSxJQUVBTCxPQUFBTSxXQUNBQSxVQUFBQyxvQkNkQVosUUFBQUMsT0FBQSxjQUNBWSxVQUFBLFVBQUEsVUFBQSxXQUFBLEtBQUEsaUJBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQWIsR0FFQSxPQUNBYyxTQUFBLElBQ0FDLE9BQ0FDLFFBQUEsWUFFQUMsS0FBQSxTQUFBRixFQUFBRyxFQUFBQyxHQUNBLEdBQUFDLEdBQUFGLEVBQUEsRUFFQUcsU0FBQUMsSUFBQVAsRUFBQUMsU0FFQWhCLEVBQUFDLE1BQUEsV0FDQVUsRUFBQVksS0FBQUgsR0FDQVQsRUFBQWEsZUFDQVosRUFBQWEsS0FBQSxXQUNBWixFQUFBYSxLQUFBTixFQUFBTCxFQUFBQyxTQUNBSCxFQUFBYyxnQkNsQkE5QixRQUFBQyxPQUFBLGNBQ0E4QixXQUFB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QUFrSyxTQUFBUCxHQUNBdkIsRUFBQSxHQUFBeEksT0FBQXVLLE1BQUEsVUFDQS9CLEVBQUFnQyxRQUFBVixFQUFBakIsRUFBQW1CLEVBQUEsR0FBQSxFQUFBLEVBQUEsSUFDQUgsRUFBQVksYUFBQUosR0FBQTdCLEVBSUEsR0FBQWtDLElBRUEsR0FBQTFLLE9BQUFpSixtQkFDQVQsTUFBQSxTQUNBbUMsUUFBQTNLLE1BQUE0SyxZQUNBSCxhQUFBekssTUFBQTZLLGFBQ0EzQixVQUFBLElBRUEsR0FBQWxKLE9BQUFlLG1CQUNBeUgsTUFBQSxFQUNBbUMsUUFBQTNLLE1BQUE0SyxZQUNBRSxXQUFBLEVBQ0FDLGFBQUEsSUFJQSxPQUFBL0ssT0FBQWdMLFdBQUFDLDBCQUFBN0ssRUFBQXNLLE9DdkZBNU4sUUFBQUMsT0FBQSxjQUNBMEMsUUFBQSxXQUFBLGlCQUFBLFNBQUF4QyxHQUVBLEdBQUF1QixHQUFBLFNBQUFILEdBQ0FBLEVBQUFnRSxNQUFBbEYsT0FBQW1FLFdBQ0FqRCxFQUFBaUUsT0FBQW5GLE9BQUFvRSxZQUVBLFFBQ0EvQyxLQUFBQSxFQUNBQyxhQUFBLFdBRUFELEVBQUF3RSxTQUFBQyxlQUFBIiwiZmlsZSI6InBpY2t5b3VyZGF5Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHA9YW5ndWxhci5tb2R1bGUoJ2FyLXRvb2xraXQnLCBbJ2lvbmljJ10pXG5cblxuICAgICAgICAgIFxuXHRcdCIsImFuZ3VsYXIubW9kdWxlKCdhci10b29sa2l0JylcclxuLnJ1bihmdW5jdGlvbigkaW9uaWNQbGF0Zm9ybSkge1xyXG4gICRpb25pY1BsYXRmb3JtLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG4gICAgaWYod2luZG93LmNvcmRvdmEgJiYgd2luZG93LmNvcmRvdmEucGx1Z2lucy5LZXlib2FyZCkge1xyXG4gICAgICAvLyBIaWRlIHRoZSBhY2Nlc3NvcnkgYmFyIGJ5IGRlZmF1bHQgKHJlbW92ZSB0aGlzIHRvIHNob3cgdGhlIGFjY2Vzc29yeSBiYXIgYWJvdmUgdGhlIGtleWJvYXJkXHJcbiAgICAgIC8vIGZvciBmb3JtIGlucHV0cylcclxuICAgICAgY29yZG92YS5wbHVnaW5zLktleWJvYXJkLmhpZGVLZXlib2FyZEFjY2Vzc29yeUJhcih0cnVlKTtcclxuXHJcbiAgICAgIC8vIERvbid0IHJlbW92ZSB0aGlzIGxpbmUgdW5sZXNzIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZy4gSXQgc3RvcHMgdGhlIHZpZXdwb3J0XHJcbiAgICAgIC8vIGZyb20gc25hcHBpbmcgd2hlbiB0ZXh0IGlucHV0cyBhcmUgZm9jdXNlZC4gSW9uaWMgaGFuZGxlcyB0aGlzIGludGVybmFsbHkgZm9yXHJcbiAgICAgIC8vIGEgbXVjaCBuaWNlciBrZXlib2FyZCBleHBlcmllbmNlLlxyXG4gICAgICBjb3Jkb3ZhLnBsdWdpbnMuS2V5Ym9hcmQuZGlzYWJsZVNjcm9sbCh0cnVlKTtcclxuICAgIH1cclxuICAgIGlmKHdpbmRvdy5TdGF0dXNCYXIpIHtcclxuICAgICAgU3RhdHVzQmFyLnN0eWxlRGVmYXVsdCgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgfSk7XHJcbiAgICBcclxuICAgIFxyXG59KSIsImFuZ3VsYXIubW9kdWxlKCdhci10b29sa2l0JylcclxuICAgIC5kaXJlY3RpdmUoJ2FyVmlldycsIGZ1bmN0aW9uKEFSVXRpbHMsIEFSQ2FtZXJhLCBBUiwgJGlvbmljUGxhdGZvcm0pIHtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgICAgIHNjb3BlOntcclxuICAgICAgICAgICAgYWN0aW9uczpcIj1hY3Rpb25zXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxpbms6ZnVuY3Rpb24oc2NvcGUsIHRFbGVtZW50LCBhdHRycyl7XHJcbiAgICAgICAgICAgIHZhciBlbGVtPXRFbGVtZW50WzBdO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coc2NvcGUuYWN0aW9ucylcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICRpb25pY1BsYXRmb3JtLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgQVJVdGlscy5zaXplKGVsZW0pO1xyXG4gICAgICAgICAgICAgICAgQVJVdGlscy4gc2V0VmlkZW9TaXplKCk7XHJcbiAgICAgICAgICAgICAgICBBUkNhbWVyYS53YWl0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgQVIuaW5pdChlbGVtLCBzY29wZS5hY3Rpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICBBUi50aWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FyLXRvb2xraXQnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0FSQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgQVJPYmplY3QpIHtcclxuXHJcblxyXG4gICAgdmFyIG9iamVjdD0gQVJPYmplY3QuY3JlYXRlSWNvc2FoZWRyb24oKTtcclxuXHJcblxyXG4gICAgJHNjb3BlLmFjdGlvbnM9e1xyXG5cclxuICAgICAgICBvbkNyZWF0ZTpmdW5jdGlvbih2aWV3LCBtYXJrZXIpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNyZWF0ZVwiKVxyXG4gICAgICAgICAgICB2aWV3LmFkZChvYmplY3QpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25VcGRhdGU6ZnVuY3Rpb24odmlldywgbWFya2VyKXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ1cGRhdGVcIilcclxuXHJcblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25EZXN0cm95OmZ1bmN0aW9uKHZpZXcsIG1hcmtlcil7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVtb3ZlXCIpXHJcbiAgICAgICAgICAgIHZpZXcucmVtb3ZlKG9iamVjdCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FyLXRvb2xraXQnKVxyXG4gICAgLmZhY3RvcnkoJ0FSM0QnLCBmdW5jdGlvbigpIHtcclxuXHJcblxyXG4gICAgdmFyIFJlYWxpdHk9ZnVuY3Rpb24oc291cmNlQ2FudmFzKXtcclxuXHJcbiAgICAgICAgdmFyIGNhbWVyYT0gbmV3IFRIUkVFLkNhbWVyYSgpO1xyXG4gICAgICAgIHZhciBzY2VuZT0gbmV3IFRIUkVFLlNjZW5lKCk7XHJcblxyXG4gICAgICAgIHZhciBnZW9tZXRyeT0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoMiwyLDApO1xyXG4gICAgICAgIHZhciB0ZXh0dXJlPW5ldyBUSFJFRS5UZXh0dXJlKHNvdXJjZUNhbnZhcyk7XHJcbiAgICAgICAgdGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcclxuICAgICAgICB0ZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLk5lYXJlc3RGaWx0ZXI7XHJcbiAgICAgICAgdGV4dHVyZS5tYWdGaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xyXG4gICAgICAgIHRleHR1cmUud3JhcFMgPSB0ZXh0dXJlLndyYXBUID1USFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nO1xyXG5cclxuXHJcbiAgICAgICAgdmFyIG1hdGVyaWFsPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xyXG4gICAgICAgICAgICBtYXA6dGV4dHVyZSxcclxuICAgICAgICAgICAgZGVwdGhUZXN0OmZhbHNlLFxyXG4gICAgICAgICAgICBkZXB0aFdyaXRlOmZhbHNlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZhciBtZXNoPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgICAgIHNjZW5lLmFkZChtZXNoKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlKCl7XHJcbiAgICAgICAgICAgIHRleHR1cmUubmVlZHNVcGRhdGU9dHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNhbWVyYTogY2FtZXJhLFxyXG4gICAgICAgICAgICBzY2VuZTogc2NlbmUsXHJcbiAgICAgICAgICAgIHVwZGF0ZTogdXBkYXRlLCBcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBTY2VuZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG4gICAgICAgIHZhciBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoIDc1LCB3aW5kb3cuaW5uZXJXaWR0aC93aW5kb3cuaW5uZXJIZWlnaHQsIDAuMSwgMTAwMCApO1xyXG4gICAgICAgIFx0Y2FtZXJhLnBvc2l0aW9uLnogPSA1O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBhZGQob2JqZWN0KSB7XHJcblxyXG4gICAgICAgICAgICBzY2VuZS5hZGQob2JqZWN0KTtcclxuXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlKG9iamVjdCkge1xyXG4gICAgICAgICAgICBzY2VuZS5yZW1vdmUob2JqZWN0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgIFxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNjZW5lOnNjZW5lLFxyXG4gICAgICAgICAgICBjYW1lcmE6Y2FtZXJhLFxyXG4gICAgICAgICAgICBhZGQ6YWRkLFxyXG4gICAgICAgICAgICByZW1vdmU6cmVtb3ZlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICB2YXIgY3JlYXRlPWZ1bmN0aW9uKGdsQ2FudmFzLCBkaW1lbnNpb25zLCBzb3VyY2VDYW52YXMpe1xyXG5cclxuICAgICAgICB2YXIgcmVuZGVyZXI9bmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoe2NhbnZhczpnbENhbnZhcywgYW50aWFsaWFzOiB0cnVlIH0pO1xyXG4gICAgICAgIHJlbmRlcmVyLnNldFNpemUoZGltZW5zaW9ucy53aWR0aCwgZGltZW5zaW9ucy5oZWlnaHQpO1xyXG4gICAgICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8oIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvICk7XHJcbiAgICAgICAgcmVuZGVyZXIuYXV0b0NsZWFyPWZhbHNlO1xyXG5cclxuICAgICAgICB2YXIgcmVhbGl0eT0gbmV3IFJlYWxpdHkoc291cmNlQ2FudmFzKTtcclxuICAgICAgICB2YXIgdmlydHVhbD0gbmV3IFNjZW5lKCk7XHJcblxyXG4gICAgICAgIHZhciBsaWdodD1uZXcgVEhSRUUuU3BvdExpZ2h0KDB4ZmZmZmZmKTtcclxuICAgICAgICBsaWdodC5wb3NpdGlvbi5zZXQoMCwwLDkwMDApO1xyXG4gICAgICAgIGxpZ2h0Lmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMygwLDAsMCkpO1xyXG4gICAgICAgIHZpcnR1YWwuc2NlbmUuYWRkKGxpZ2h0KTtcclxuXHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZW5kZXIoKXtcclxuICAgICAgICAgICAgcmVuZGVyZXIucmVuZGVyKHJlYWxpdHkuc2NlbmUsIHJlYWxpdHkuY2FtZXJhKTtcclxuXHJcbiAgICAgICAgICAgIHJlbmRlcmVyLnJlbmRlcih2aXJ0dWFsLnNjZW5lLCB2aXJ0dWFsLmNhbWVyYSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlKCl7XHJcbiAgICAgICAgICAgICByZWFsaXR5LnVwZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkKG9iamVjdCl7XHJcbiAgICAgICAgICAgICAgdmlydHVhbC5hZGQob2JqZWN0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICBcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlKG9iamVjdCl7XHJcbiAgICAgICAgICAgICB2aXJ0dWFsLnJlbW92ZShvYmplY3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYWRkOiBhZGQsXHJcbiAgICAgICAgICAgIHJlbW92ZTogcmVtb3ZlLFxyXG4gICAgICAgICAgICB1cGRhdGU6IHVwZGF0ZSxcclxuICAgICAgICAgICAgcmVuZGVyOiByZW5kZXIsXHJcbiAgICAgICAgICAgIGdsQ2FudmFzOiBnbENhbnZhcyxcclxuICAgICAgICAgICAgdmlydHVhbDp2aXJ0dWFsLnNjZW5lXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGNyZWF0ZTpjcmVhdGVcclxuICAgIH1cclxuXHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdhci10b29sa2l0JylcclxuICAgIC5mYWN0b3J5KCdBUkNhbWVyYScsIGZ1bmN0aW9uKCBBUlV0aWxzLCAkaW9uaWNQbGF0Zm9ybSkge1xyXG5cclxuICAgIHZhciB2aWRlbz0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZGVvJyk7XHJcbiBcclxuICAgIHZhciBnZXRNZWRpYUNhcHR1cmUgPSBmdW5jdGlvbih0LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmIChuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5hdmlnYXRvci5nZXRVc2VyTWVkaWEodCwgb25zdWNjZXNzLCBvbmVycm9yKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gbmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYSh0LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpO1xyXG4gICAgICAgIH0gXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIG9uU3VjY2Vzcz1mdW5jdGlvbihjYil7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSl7XHJcbiAgICAgICAgICAgIHZhciB2ZW5kb3JVUkwgPSB3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkw7XHJcbiAgICAgICAgICAgIHZpZGVvLnNyYyA9IHZlbmRvclVSTC5jcmVhdGVPYmplY3RVUkwoc3RyZWFtKTtcclxuICAgICAgICAgICAgdmlkZW8ucGxheSgpO1xyXG4gICAgICAgICAgICBjYigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICB2YXIgb25FcnJvcj1mdW5jdGlvbihlcnIpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiQW4gZXJyb3Igb2NjdXJlZCEgXCIgKyBlcnIpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB2YXIgd2FpdENhbWVyYT1mdW5jdGlvbihjYWxsYmFjayl7XHJcblxyXG4gICAgICAgIGdldE1lZGlhQ2FwdHVyZSh7dmlkZW86IHRydWUsYXVkaW86IGZhbHNlfSwgb25TdWNjZXNzKGNhbGxiYWNrKSwgb25FcnJvcik7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHZhciBnZXREaW1lbnNpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgd2lkdGg6dmlkZW8ud2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodDp2aWRlby5oZWlnaHRcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGNvcHlUb0NvbnRleHQ9ZnVuY3Rpb24oY29udGV4dCl7XHJcbiAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UodmlkZW8sIDAsMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB3YWl0OndhaXRDYW1lcmEsXHJcbiAgICAgICAgY29weVRvQ29udGV4dDpjb3B5VG9Db250ZXh0LFxyXG4gICAgICAgIGdldERpbWVuc2lvbnM6Z2V0RGltZW5zaW9uc1xyXG4gICAgfVxyXG5cclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FyLXRvb2xraXQnKVxyXG4gICAgLmZhY3RvcnkoJ0FSRGV0ZWN0b3InLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUoc291cmNlQ2FudmFzKXtcclxuICAgICAgIHZhciBKU0FSUmFzdGVyID0gbmV3IE55QVJSZ2JSYXN0ZXJfQ2FudmFzMkQoc291cmNlQ2FudmFzKTtcclxuICAgICAgICB2YXIgSlNBUlBhcmFtZXRlcnMgPSBuZXcgRkxBUlBhcmFtKHNvdXJjZUNhbnZhcy53aWR0aCwgc291cmNlQ2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgdmFyIEpTQVJEZXRlY3RvciA9IG5ldyBGTEFSTXVsdGlJZE1hcmtlckRldGVjdG9yKEpTQVJQYXJhbWV0ZXJzLCAxMjApO1xyXG4gICAgICAgIEpTQVJEZXRlY3Rvci5zZXRDb250aW51ZU1vZGUodHJ1ZSk7XHJcblxyXG4gICAgICAgIHZhciBnZXRNYXJrZXJOdW1iZXIgPSBmdW5jdGlvbihpZHgpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSBKU0FSRGV0ZWN0b3IuZ2V0SWRNYXJrZXJEYXRhKGlkeCk7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLnBhY2tldExlbmd0aCA+IDQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciByZXN1bHQ9MDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLnBhY2tldExlbmd0aDsgaSsrICkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCA8PCA4KSB8IGRhdGEuZ2V0UGFja2V0RGF0YShpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBnZXRUcmFuc2Zvcm1NYXRyaXggPSBmdW5jdGlvbihpZHgpIHtcclxuICAgICAgICAgICAgdmFyIG1hdCA9IG5ldyBOeUFSVHJhbnNNYXRSZXN1bHQoKTtcclxuICAgICAgICAgICAgSlNBUkRldGVjdG9yLmdldFRyYW5zZm9ybU1hdHJpeChpZHgsIG1hdCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgY20gPSBuZXcgRmxvYXQzMkFycmF5KDE2KTtcclxuICAgICAgICAgICAgY21bMF0gPSBtYXQubTAwO1xyXG4gICAgICAgICAgICBjbVsxXSA9IC1tYXQubTEwO1xyXG4gICAgICAgICAgICBjbVsyXSA9IG1hdC5tMjA7XHJcbiAgICAgICAgICAgIGNtWzNdID0gMDtcclxuICAgICAgICAgICAgY21bNF0gPSBtYXQubTAxO1xyXG4gICAgICAgICAgICBjbVs1XSA9IC1tYXQubTExO1xyXG4gICAgICAgICAgICBjbVs2XSA9IG1hdC5tMjE7XHJcbiAgICAgICAgICAgIGNtWzddID0gMDtcclxuICAgICAgICAgICAgY21bOF0gPSAtbWF0Lm0wMjtcclxuICAgICAgICAgICAgY21bOV0gPSBtYXQubTEyO1xyXG4gICAgICAgICAgICBjbVsxMF0gPSAtbWF0Lm0yMjtcclxuICAgICAgICAgICAgY21bMTFdID0gMDtcclxuICAgICAgICAgICAgY21bMTJdID0gbWF0Lm0wMztcclxuICAgICAgICAgICAgY21bMTNdID0gLW1hdC5tMTM7XHJcbiAgICAgICAgICAgIGNtWzE0XSA9IG1hdC5tMjM7XHJcbiAgICAgICAgICAgIGNtWzE1XSA9IDE7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY207XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZ2V0Q2FtZXJhTWF0cml4ID0gZnVuY3Rpb24oek5lYXIsIHpGYXIpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBGbG9hdDMyQXJyYXkoMTYpO1xyXG4gICAgICAgICAgICBKU0FSUGFyYW1ldGVycy5jb3B5Q2FtZXJhTWF0cml4KHJlc3VsdCwgek5lYXIsIHpGYXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHBlcnNpc3RUaW1lID0gMTtcclxuICAgICAgICB2YXIgbmV3TWFya2VyID0gZnVuY3Rpb24oaWQsIG1hdHJpeCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgICAgICAgICAgbWF0cml4OiBtYXRyaXgsXHJcbiAgICAgICAgICAgICAgICBhZ2U6IHBlcnNpc3RUaW1lLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbWFya2VycyA9IHt9O1xyXG4gICAgICAgIHZhciBkZXRlY3QgPSBmdW5jdGlvbiggb25DcmVhdGUsIG9uVXBkYXRlLCBvbkRlc3Ryb3kgKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXJrZXJDb3VudCA9IEpTQVJEZXRlY3Rvci5kZXRlY3RNYXJrZXJMaXRlKEpTQVJSYXN0ZXIsIDcwKTsgXHJcbiAgICAgICAgICAgIGZvciggdmFyIGluZGV4ID0gMDsgaW5kZXggPCBtYXJrZXJDb3VudDsgaW5kZXgrKyApIHtcclxuICAgICAgICAgICAgICAgIHZhciBpZCA9IGdldE1hcmtlck51bWJlcihpbmRleCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbWFya2Vyc1tpZF07XHJcbiAgICAgICAgICAgICAgICBpZiggbWFya2VyID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyID0gbmV3TWFya2VyKGlkLCBnZXRUcmFuc2Zvcm1NYXRyaXgoaW5kZXgpKTtcclxuICAgICAgICAgICAgICAgICAgICBtYXJrZXJzW2lkXSA9IG1hcmtlcjtcclxuICAgICAgICAgICAgICAgICAgICBvbkNyZWF0ZSggbWFya2VyICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXJrZXIubWF0cml4ID0gZ2V0VHJhbnNmb3JtTWF0cml4KGluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBtYXJrZXIuYWdlID0gcGVyc2lzdFRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgb25VcGRhdGUoIG1hcmtlciApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IoIHZhciBpZCBpbiBtYXJrZXJzICkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG1hcmtlcnNbaWRdO1xyXG4gICAgICAgICAgICAgICAgaWYoIG1hcmtlciApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiggbWFya2VyLmFnZS0tID09IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRGVzdHJveSggbWFya2VyICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtYXJrZXJzW2lkXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgIGRldGVjdDogZGV0ZWN0LFxyXG4gICAgICAgICAgICBnZXRDYW1lcmFNYXRyaXg6IGdldENhbWVyYU1hdHJpeFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjcmVhdGU6Y3JlYXRlXHJcbiAgICB9XHJcblxyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXItdG9vbGtpdCcpXHJcbiAgICAuZmFjdG9yeSgnQVInLCBmdW5jdGlvbihBUkNhbWVyYSwgQVJEZXRlY3RvciwgQVIzRCwgQVJNYXJrZXIpIHtcclxuXHJcbiAgICB2YXIgY2FudmFzLCBjb250ZXh0LCBkZXRlY3RvciwgdmlldywgYWN0aW9ucztcclxuICAgIHZhciBpbml0PWZ1bmN0aW9uKGdsQ2FudmFzLCBtYXJrZXJfYWN0aW9ucyl7XHJcblxyXG4gICAgICAgIG1hcmtlcl9hY3Rpb25zPW1hcmtlcl9hY3Rpb25zIHx8e31cclxuICAgICAgICBhY3Rpb25zPXt9OyBcclxuXHJcbiAgICAgICAgY2FudmFzPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdmFyIGNhbWVyYURpbWVuc2lvbnM9QVJDYW1lcmEuZ2V0RGltZW5zaW9ucygpO1xyXG5cclxuICAgICAgICBjYW52YXMud2lkdGggPSBjYW1lcmFEaW1lbnNpb25zLndpZHRoO1xyXG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW1lcmFEaW1lbnNpb25zLmhlaWdodDtcclxuXHJcbiAgICAgICAgY29udGV4dD1jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG5cclxuICAgICAgICBkZXRlY3Rvcj1BUkRldGVjdG9yLmNyZWF0ZShjYW52YXMpO1xyXG5cclxuICAgICAgICB2aWV3PUFSM0QuY3JlYXRlKGdsQ2FudmFzLCBjYW1lcmFEaW1lbnNpb25zLCBjYW52YXMpO1xyXG5cclxuICAgICAgICBhY3Rpb25zLm9uQ3JlYXRlPUFSTWFya2VyLlByaW1pdGl2ZSh2aWV3LCBtYXJrZXJfYWN0aW9ucy5vbkNyZWF0ZXx8QVJNYXJrZXIub25DcmVhdGUpO1xyXG4gICAgICAgIGFjdGlvbnMub25VcGRhdGU9QVJNYXJrZXIuUHJpbWl0aXZlKHZpZXcsIG1hcmtlcl9hY3Rpb25zLm9uVXBkYXRlfHxBUk1hcmtlci5vblVwZGF0ZSk7XHJcbiAgICAgICAgYWN0aW9ucy5vbkRlc3Ryb3k9QVJNYXJrZXIuUHJpbWl0aXZlKHZpZXcsIG1hcmtlcl9hY3Rpb25zLm9uRGVzdHJveXx8QVJNYXJrZXIub25EZXN0cm95KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHRpY2s9ZnVuY3Rpb24oKXtcclxuICAgICAgICBBUkNhbWVyYS5jb3B5VG9Db250ZXh0KGNvbnRleHQpO1xyXG4gICAgICAgIGNhbnZhcy5jaGFuZ2VkPXRydWU7XHJcblxyXG4gICAgICAgIGRldGVjdG9yLmRldGVjdChhY3Rpb25zLm9uQ3JlYXRlLCBhY3Rpb25zLm9uVXBkYXRlLCBhY3Rpb25zLm9uRGVzdHJveSk7XHJcblxyXG4gICAgICAgIHZpZXcudXBkYXRlKCk7XHJcbiAgICAgICAgdmlldy5yZW5kZXIoKTtcclxuXHJcblxyXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGljayk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OmluaXQsXHJcbiAgICAgICAgdGljazp0aWNrXHJcbiAgICB9XHJcblxyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXItdG9vbGtpdCcpXHJcbiAgICAuZmFjdG9yeSgnQVJNYXJrZXInLCBmdW5jdGlvbihBUk9iamVjdCkge1xyXG5cclxuICAgIHZhciBvYmplY3RzPXtcclxuICAgICAgICAxNjogQVJPYmplY3QuY3JlYXRlQmFzaWNDdWJlKHtjb2xvcjoweENDMDAwMH0pLFxyXG4gICAgICAgIDMyOiBBUk9iamVjdC5jcmVhdGVCYXNpY0N1YmUoe2NvbG9yOjB4MDBDQzAwfSksXHJcbiAgICAgICAgNjQ6IEFST2JqZWN0LmNyZWF0ZUJhc2ljQ3ViZSh7Y29sb3I6MHgwMDAwQ0N9KVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICB2YXIgb25DcmVhdGU9ZnVuY3Rpb24odmlldywgbWFya2VyKXtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJDcmVhdGVkXCIpXHJcbiAgICAgICAgY29uc29sZS5sb2cobWFya2VyLmlkKVxyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBvYmplY3Q9b2JqZWN0c1ttYXJrZXIuaWRdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG9iamVjdC5yb3RhdGlvbi54ICs9IDAuMTtcclxuICAgICAgICBvYmplY3Qucm90YXRpb24ueSArPSAwLjE7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmlldy5hZGQob2JqZWN0KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgb25VcGRhdGU9ZnVuY3Rpb24odmlldywgbWFya2VyKXtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJ1cGRhdGVcIilcclxuICAgICAgICBjb25zb2xlLmxvZyhtYXJrZXIuaWQpXHJcblxyXG4gICAgICAgIHZhciBvYmplY3Q9b2JqZWN0c1ttYXJrZXIuaWRdO1xyXG5cclxuICAgICAgICBvYmplY3Qucm90YXRpb24ueCArPSAwLjE7XHJcbiAgICAgICAgb2JqZWN0LnJvdGF0aW9uLnkgKz0gMC4xO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICB2YXIgb25EZXN0cm95PWZ1bmN0aW9uKHZpZXcsIG1hcmtlcil7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwicmVtb3ZlXCIpXHJcbiAgICAgICAgY29uc29sZS5sb2cobWFya2VyLmlkKVxyXG5cclxuICAgICAgICB2YXIgb2JqZWN0PW9iamVjdHNbbWFya2VyLmlkXTtcclxuICAgICAgICB2aWV3LnJlbW92ZShvYmplY3QpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICB2YXIgUHJpbWl0aXZlPWZ1bmN0aW9uKHZpZXcsIGNiKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhjYilcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24obWFya2VyKXtcclxuICAgICAgICAgICAgY2IodmlldywgbWFya2VyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBQcmltaXRpdmU6UHJpbWl0aXZlLFxyXG4gICAgICAgIG9uQ3JlYXRlOm9uQ3JlYXRlLFxyXG4gICAgICAgIG9uVXBkYXRlOm9uVXBkYXRlLFxyXG4gICAgICAgIG9uRGVzdHJveTpvbkRlc3Ryb3lcclxuICAgIH1cclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FyLXRvb2xraXQnKVxyXG4gIC5mYWN0b3J5KCdBUk9iamVjdCcsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIHJldHVybiB7XHJcblxyXG4gICAgICBjcmVhdGVCYXNpY0N1YmU6IGZ1bmN0aW9uKGNvbG9yKSB7XHJcbiAgICAgICAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDEsIDEsIDEpO1xyXG4gICAgICAgIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XHJcbiAgICAgICAgICBjb2xvcjogY29sb3JcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgY3ViZSA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcbiAgICAgICAgY3ViZS5wb3NpdGlvbi56ID0gLTU7XHJcbiAgICAgICAgcmV0dXJuIGN1YmU7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBjcmVhdGVQaG9uZ0N1YmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxLCAxLCAxKTtcclxuICAgICAgICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe1xyXG4gICAgICAgICAgY29sb3I6IDB4N0ZDQzE5LFxyXG4gICAgICAgICAgc2hpbmluZXNzOiAyMzBcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgY3ViZSA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcbiAgICAgICAgcmV0dXJuIGN1YmU7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBjcmVhdGVHcmFkaWVudFBsYW5lOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuICAgICAgICBjYW52YXMud2lkdGggPSAxMjg7XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IDEyODtcclxuXHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG5cclxuICAgICAgICB2YXIgZ3JhZGllbnQgPSBjb250ZXh0LmNyZWF0ZVJhZGlhbEdyYWRpZW50KGNhbnZhcy53aWR0aCAvIDIsIGNhbnZhcy5oZWlnaHQgLyAyLCAwLCBjYW52YXMud2lkdGggLyAyLCBjYW52YXMuaGVpZ2h0IC8gMiwgY2FudmFzLndpZHRoIC8gMik7XHJcblxyXG4gICAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLjEsICdyZ2JhKDIxMCwyMTAsMjEwLDEpJyk7XHJcbiAgICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKDEsICdyZ2JhKDI1NSwyNTUsMjU1LDEpJyk7XHJcblxyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZ3JhZGllbnQ7XHJcbiAgICAgICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG5cclxuXHJcbiAgICAgICAgdmFyIHNoYWRvd1RleHR1cmUgPSBuZXcgVEhSRUUuVGV4dHVyZShjYW52YXMpO1xyXG4gICAgICAgIHNoYWRvd1RleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgc2hhZG93TWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xyXG4gICAgICAgICAgbWFwOiBzaGFkb3dUZXh0dXJlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIHNoYWRvd0dlbyA9IG5ldyBUSFJFRS5QbGFuZUJ1ZmZlckdlb21ldHJ5KDMwMCwgMzAwLCAxLCAxKTtcclxuXHJcbiAgICAgICAgdmFyIG1lc2ggPSBuZXcgVEhSRUUuTWVzaChzaGFkb3dHZW8sIHNoYWRvd01hdGVyaWFsKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG1lc2g7XHJcblxyXG4gICAgICB9LFxyXG5cclxuICAgICAgY3JlYXRlSWNvc2FoZWRyb246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciByYWRpdXM9MTtcclxuICAgICAgICB2YXIgY29sb3IsIGYsIHAsIHZlcnRleEluZGV4LCBmYWNlSW5kaWNlcyA9IFsnYScsICdiJywgJ2MnXTtcclxuICAgICAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuSWNvc2FoZWRyb25HZW9tZXRyeShyYWRpdXMsIDEpO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdlb21ldHJ5LmZhY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBmID0gZ2VvbWV0cnkuZmFjZXNbaV07XHJcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDM7IGorKykge1xyXG4gICAgICAgICAgICB2ZXJ0ZXhJbmRleCA9IGZbZmFjZUluZGljZXNbal1dO1xyXG4gICAgICAgICAgICBwID0gZ2VvbWV0cnkudmVydGljZXNbdmVydGV4SW5kZXhdO1xyXG4gICAgICAgICAgICBjb2xvciA9IG5ldyBUSFJFRS5Db2xvcigweGZmZmZmZik7XHJcbiAgICAgICAgICAgIGNvbG9yLnNldEhTTCgocC55IC8gcmFkaXVzICsgMSkgLyAyLCAxLjAsIDAuNSk7XHJcbiAgICAgICAgICAgIGYudmVydGV4Q29sb3JzW2pdID0gY29sb3I7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbWF0ZXJpYWxzID0gW1xyXG5cclxuICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XHJcbiAgICAgICAgICAgIGNvbG9yOiAweGZmZmZmZixcclxuICAgICAgICAgICAgc2hhZGluZzogVEhSRUUuRmxhdFNoYWRpbmcsXHJcbiAgICAgICAgICAgIHZlcnRleENvbG9yczogVEhSRUUuVmVydGV4Q29sb3JzLFxyXG4gICAgICAgICAgICBzaGluaW5lc3M6IDBcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcclxuICAgICAgICAgICAgY29sb3I6IDB4MDAwMDAwLFxyXG4gICAgICAgICAgICBzaGFkaW5nOiBUSFJFRS5GbGF0U2hhZGluZyxcclxuICAgICAgICAgICAgd2lyZWZyYW1lOiB0cnVlLFxyXG4gICAgICAgICAgICB0cmFuc3BhcmVudDogdHJ1ZVxyXG4gICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgXTtcclxuICAgICAgcmV0dXJuIFRIUkVFLlNjZW5lVXRpbHMuY3JlYXRlTXVsdGlNYXRlcmlhbE9iamVjdChnZW9tZXRyeSwgbWF0ZXJpYWxzKTtcclxuICAgICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgfVxyXG4gIH0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXItdG9vbGtpdCcpXHJcbiAgICAuZmFjdG9yeSgnQVJVdGlscycsIGZ1bmN0aW9uKCRpb25pY1BsYXRmb3JtKSB7XHJcblxyXG4gICAgdmFyIHNpemU9ZnVuY3Rpb24oZWxlbSl7XHJcbiAgICAgICAgICAgIGVsZW0ud2lkdGg9d2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgICAgICAgIGVsZW0uaGVpZ2h0PXdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNpemU6c2l6ZSwgXHJcbiAgICAgICAgc2V0VmlkZW9TaXplOmZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICBzaXplKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWRlbycpKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuIl19
